import { __assign, __awaiter, __generator, __read } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map as __map, parseEpochTimestamp as __parseEpochTimestamp, resolvedPath as __resolvedPath, throwDefaultError, } from "@aws-sdk/smithy-client";
import { AccountSuspendedException, AlreadyExistsException, BadRequestException, ConcurrentModificationException, ConflictException, InvalidNextTokenException, LimitExceededException, MailFromDomainNotVerifiedException, MessageRejected, NotFoundException, SendingPausedException, TooManyRequestsException, } from "../models/models_0";
import { SESv2ServiceException as __BaseException } from "../models/SESv2ServiceException";
export var serializeAws_restJson1CreateConfigurationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/configuration-sets";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })), (input.DeliveryOptions != null && {
                    DeliveryOptions: serializeAws_restJson1DeliveryOptions(input.DeliveryOptions, context),
                })), (input.ReputationOptions != null && {
                    ReputationOptions: serializeAws_restJson1ReputationOptions(input.ReputationOptions, context),
                })), (input.SendingOptions != null && {
                    SendingOptions: serializeAws_restJson1SendingOptions(input.SendingOptions, context),
                })), (input.SuppressionOptions != null && {
                    SuppressionOptions: serializeAws_restJson1SuppressionOptions(input.SuppressionOptions, context),
                })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })), (input.TrackingOptions != null && {
                    TrackingOptions: serializeAws_restJson1TrackingOptions(input.TrackingOptions, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateConfigurationSetEventDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign(__assign({}, (input.EventDestination != null && {
                    EventDestination: serializeAws_restJson1EventDestinationDefinition(input.EventDestination, context),
                })), (input.EventDestinationName != null && { EventDestinationName: input.EventDestinationName })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateContactCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/contact-lists/{ContactListName}/contacts";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                body = JSON.stringify(__assign(__assign(__assign(__assign({}, (input.AttributesData != null && { AttributesData: input.AttributesData })), (input.EmailAddress != null && { EmailAddress: input.EmailAddress })), (input.TopicPreferences != null && {
                    TopicPreferences: serializeAws_restJson1TopicPreferenceList(input.TopicPreferences, context),
                })), (input.UnsubscribeAll != null && { UnsubscribeAll: input.UnsubscribeAll })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateContactListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/contact-lists";
                body = JSON.stringify(__assign(__assign(__assign(__assign({}, (input.ContactListName != null && { ContactListName: input.ContactListName })), (input.Description != null && { Description: input.Description })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })), (input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/custom-verification-email-templates";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.FailureRedirectionURL != null && { FailureRedirectionURL: input.FailureRedirectionURL })), (input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress })), (input.SuccessRedirectionURL != null && { SuccessRedirectionURL: input.SuccessRedirectionURL })), (input.TemplateContent != null && { TemplateContent: input.TemplateContent })), (input.TemplateName != null && { TemplateName: input.TemplateName })), (input.TemplateSubject != null && { TemplateSubject: input.TemplateSubject })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateDedicatedIpPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ip-pools";
                body = JSON.stringify(__assign(__assign({}, (input.PoolName != null && { PoolName: input.PoolName })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateDeliverabilityTestReportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/deliverability-dashboard/test";
                body = JSON.stringify(__assign(__assign(__assign(__assign({}, (input.Content != null && { Content: serializeAws_restJson1EmailContent(input.Content, context) })), (input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress })), (input.ReportName != null && { ReportName: input.ReportName })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateEmailIdentityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/identities";
                body = JSON.stringify(__assign(__assign(__assign(__assign({}, (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })), (input.DkimSigningAttributes != null && {
                    DkimSigningAttributes: serializeAws_restJson1DkimSigningAttributes(input.DkimSigningAttributes, context),
                })), (input.EmailIdentity != null && { EmailIdentity: input.EmailIdentity })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateEmailIdentityPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "PolicyName", function () { return input.PolicyName; }, "{PolicyName}", false);
                body = JSON.stringify(__assign({}, (input.Policy != null && { Policy: input.Policy })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates";
                body = JSON.stringify(__assign(__assign({}, (input.TemplateContent != null && {
                    TemplateContent: serializeAws_restJson1EmailTemplateContent(input.TemplateContent, context),
                })), (input.TemplateName != null && { TemplateName: input.TemplateName })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateImportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/import-jobs";
                body = JSON.stringify(__assign(__assign({}, (input.ImportDataSource != null && {
                    ImportDataSource: serializeAws_restJson1ImportDataSource(input.ImportDataSource, context),
                })), (input.ImportDestination != null && {
                    ImportDestination: serializeAws_restJson1ImportDestination(input.ImportDestination, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteConfigurationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EventDestinationName", function () { return input.EventDestinationName; }, "{EventDestinationName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteContactCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailAddress", function () { return input.EmailAddress; }, "{EmailAddress}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteContactListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/contact-lists/{ContactListName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/custom-verification-email-templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteDedicatedIpPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ip-pools/{PoolName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "PoolName", function () { return input.PoolName; }, "{PoolName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEmailIdentityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/identities/{EmailIdentity}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEmailIdentityPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "PolicyName", function () { return input.PolicyName; }, "{PolicyName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteSuppressedDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/suppression/addresses/{EmailAddress}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailAddress", function () { return input.EmailAddress; }, "{EmailAddress}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetAccountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/account";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetBlacklistReportsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/blacklist-report";
                query = map({
                    BlacklistItemNames: [
                        function () { return input.BlacklistItemNames !== void 0; },
                        function () { return (input.BlacklistItemNames || []).map(function (_entry) { return _entry; }); },
                    ],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetConfigurationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetConfigurationSetEventDestinationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetContactCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailAddress", function () { return input.EmailAddress; }, "{EmailAddress}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetContactListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/contact-lists/{ContactListName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCustomVerificationEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/custom-verification-email-templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDedicatedIpCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ips/{Ip}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Ip", function () { return input.Ip; }, "{Ip}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDedicatedIpsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ips";
                query = map({
                    PoolName: [, input.PoolName],
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/deliverability-dashboard";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDeliverabilityTestReportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/test-reports/{ReportId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ReportId", function () { return input.ReportId; }, "{ReportId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDomainDeliverabilityCampaignCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/campaigns/{CampaignId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetDomainStatisticsReportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/statistics-report/{Domain}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Domain", function () { return input.Domain; }, "{Domain}", false);
                query = map({
                    StartDate: [
                        function () { return input.StartDate !== void 0; },
                        function () { return (input.StartDate.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                    EndDate: [function () { return input.EndDate !== void 0; }, function () { return (input.EndDate.toISOString().split(".")[0] + "Z").toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEmailIdentityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/identities/{EmailIdentity}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEmailIdentityPoliciesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/policies";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetImportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/import-jobs/{JobId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "JobId", function () { return input.JobId; }, "{JobId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSuppressedDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/suppression/addresses/{EmailAddress}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailAddress", function () { return input.EmailAddress; }, "{EmailAddress}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListConfigurationSetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/configuration-sets";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListContactListsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/contact-lists";
                query = map({
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                    NextToken: [, input.NextToken],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListContactsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/contact-lists/{ContactListName}/contacts";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                query = map({
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                    NextToken: [, input.NextToken],
                });
                body = JSON.stringify(__assign({}, (input.Filter != null && { Filter: serializeAws_restJson1ListContactsFilter(input.Filter, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/custom-verification-email-templates";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListDedicatedIpPoolsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ip-pools";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListDeliverabilityTestReportsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/test-reports";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns";
                resolvedPath = __resolvedPath(resolvedPath, input, "SubscribedDomain", function () { return input.SubscribedDomain; }, "{SubscribedDomain}", false);
                query = map({
                    StartDate: [
                        function () { return input.StartDate !== void 0; },
                        function () { return (input.StartDate.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                    EndDate: [function () { return input.EndDate !== void 0; }, function () { return (input.EndDate.toISOString().split(".")[0] + "Z").toString(); }],
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListEmailIdentitiesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/identities";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListEmailTemplatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListImportJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/import-jobs";
                query = map({
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                body = JSON.stringify(__assign({}, (input.ImportDestinationType != null && { ImportDestinationType: input.ImportDestinationType })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListSuppressedDestinationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/suppression/addresses";
                query = map({
                    Reason: [function () { return input.Reasons !== void 0; }, function () { return (input.Reasons || []).map(function (_entry) { return _entry; }); }],
                    StartDate: [
                        function () { return input.StartDate !== void 0; },
                        function () { return (input.StartDate.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                    EndDate: [function () { return input.EndDate !== void 0; }, function () { return (input.EndDate.toISOString().split(".")[0] + "Z").toString(); }],
                    NextToken: [, input.NextToken],
                    PageSize: [function () { return input.PageSize !== void 0; }, function () { return input.PageSize.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/tags";
                query = map({
                    ResourceArn: [, input.ResourceArn],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/account/dedicated-ips/warmup";
                body = JSON.stringify(__assign({}, (input.AutoWarmupEnabled != null && { AutoWarmupEnabled: input.AutoWarmupEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutAccountDetailsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/account/details";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.AdditionalContactEmailAddresses != null && {
                    AdditionalContactEmailAddresses: serializeAws_restJson1AdditionalContactEmailAddresses(input.AdditionalContactEmailAddresses, context),
                })), (input.ContactLanguage != null && { ContactLanguage: input.ContactLanguage })), (input.MailType != null && { MailType: input.MailType })), (input.ProductionAccessEnabled != null && { ProductionAccessEnabled: input.ProductionAccessEnabled })), (input.UseCaseDescription != null && { UseCaseDescription: input.UseCaseDescription })), (input.WebsiteURL != null && { WebsiteURL: input.WebsiteURL })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutAccountSendingAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/account/sending";
                body = JSON.stringify(__assign({}, (input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutAccountSuppressionAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/account/suppression";
                body = JSON.stringify(__assign({}, (input.SuppressedReasons != null && {
                    SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/delivery-options";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign(__assign({}, (input.SendingPoolName != null && { SendingPoolName: input.SendingPoolName })), (input.TlsPolicy != null && { TlsPolicy: input.TlsPolicy })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutConfigurationSetReputationOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/reputation-options";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign({}, (input.ReputationMetricsEnabled != null && { ReputationMetricsEnabled: input.ReputationMetricsEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutConfigurationSetSendingOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/sending";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign({}, (input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/suppression-options";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign({}, (input.SuppressedReasons != null && {
                    SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/tracking-options";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                body = JSON.stringify(__assign({}, (input.CustomRedirectDomain != null && { CustomRedirectDomain: input.CustomRedirectDomain })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutDedicatedIpInPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ips/{Ip}/pool";
                resolvedPath = __resolvedPath(resolvedPath, input, "Ip", function () { return input.Ip; }, "{Ip}", false);
                body = JSON.stringify(__assign({}, (input.DestinationPoolName != null && { DestinationPoolName: input.DestinationPoolName })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/dedicated-ips/{Ip}/warmup";
                resolvedPath = __resolvedPath(resolvedPath, input, "Ip", function () { return input.Ip; }, "{Ip}", false);
                body = JSON.stringify(__assign({}, (input.WarmupPercentage != null && { WarmupPercentage: input.WarmupPercentage })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutDeliverabilityDashboardOptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/deliverability-dashboard";
                body = JSON.stringify(__assign(__assign({}, (input.DashboardEnabled != null && { DashboardEnabled: input.DashboardEnabled })), (input.SubscribedDomains != null && {
                    SubscribedDomains: serializeAws_restJson1DomainDeliverabilityTrackingOptions(input.SubscribedDomains, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/configuration-set";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                body = JSON.stringify(__assign({}, (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEmailIdentityDkimAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/identities/{EmailIdentity}/dkim";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                body = JSON.stringify(__assign({}, (input.SigningEnabled != null && { SigningEnabled: input.SigningEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/email/identities/{EmailIdentity}/dkim/signing";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                body = JSON.stringify(__assign(__assign({}, (input.SigningAttributes != null && {
                    SigningAttributes: serializeAws_restJson1DkimSigningAttributes(input.SigningAttributes, context),
                })), (input.SigningAttributesOrigin != null && { SigningAttributesOrigin: input.SigningAttributesOrigin })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/feedback";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                body = JSON.stringify(__assign({}, (input.EmailForwardingEnabled != null && { EmailForwardingEnabled: input.EmailForwardingEnabled })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/mail-from";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                body = JSON.stringify(__assign(__assign({}, (input.BehaviorOnMxFailure != null && { BehaviorOnMxFailure: input.BehaviorOnMxFailure })), (input.MailFromDomain != null && { MailFromDomain: input.MailFromDomain })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutSuppressedDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/suppression/addresses";
                body = JSON.stringify(__assign(__assign({}, (input.EmailAddress != null && { EmailAddress: input.EmailAddress })), (input.Reason != null && { Reason: input.Reason })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendBulkEmailCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/outbound-bulk-emails";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.BulkEmailEntries != null && {
                    BulkEmailEntries: serializeAws_restJson1BulkEmailEntryList(input.BulkEmailEntries, context),
                })), (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })), (input.DefaultContent != null && {
                    DefaultContent: serializeAws_restJson1BulkEmailContent(input.DefaultContent, context),
                })), (input.DefaultEmailTags != null && {
                    DefaultEmailTags: serializeAws_restJson1MessageTagList(input.DefaultEmailTags, context),
                })), (input.FeedbackForwardingEmailAddress != null && {
                    FeedbackForwardingEmailAddress: input.FeedbackForwardingEmailAddress,
                })), (input.FeedbackForwardingEmailAddressIdentityArn != null && {
                    FeedbackForwardingEmailAddressIdentityArn: input.FeedbackForwardingEmailAddressIdentityArn,
                })), (input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress })), (input.FromEmailAddressIdentityArn != null && {
                    FromEmailAddressIdentityArn: input.FromEmailAddressIdentityArn,
                })), (input.ReplyToAddresses != null && {
                    ReplyToAddresses: serializeAws_restJson1EmailAddressList(input.ReplyToAddresses, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendCustomVerificationEmailCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/outbound-custom-verification-emails";
                body = JSON.stringify(__assign(__assign(__assign({}, (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })), (input.EmailAddress != null && { EmailAddress: input.EmailAddress })), (input.TemplateName != null && { TemplateName: input.TemplateName })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendEmailCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/outbound-emails";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName })), (input.Content != null && { Content: serializeAws_restJson1EmailContent(input.Content, context) })), (input.Destination != null && { Destination: serializeAws_restJson1Destination(input.Destination, context) })), (input.EmailTags != null && { EmailTags: serializeAws_restJson1MessageTagList(input.EmailTags, context) })), (input.FeedbackForwardingEmailAddress != null && {
                    FeedbackForwardingEmailAddress: input.FeedbackForwardingEmailAddress,
                })), (input.FeedbackForwardingEmailAddressIdentityArn != null && {
                    FeedbackForwardingEmailAddressIdentityArn: input.FeedbackForwardingEmailAddressIdentityArn,
                })), (input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress })), (input.FromEmailAddressIdentityArn != null && {
                    FromEmailAddressIdentityArn: input.FromEmailAddressIdentityArn,
                })), (input.ListManagementOptions != null && {
                    ListManagementOptions: serializeAws_restJson1ListManagementOptions(input.ListManagementOptions, context),
                })), (input.ReplyToAddresses != null && {
                    ReplyToAddresses: serializeAws_restJson1EmailAddressList(input.ReplyToAddresses, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/tags";
                body = JSON.stringify(__assign(__assign({}, (input.ResourceArn != null && { ResourceArn: input.ResourceArn })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1TestRenderEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates/{TemplateName}/render";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                body = JSON.stringify(__assign({}, (input.TemplateData != null && { TemplateData: input.TemplateData })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/tags";
                query = map({
                    ResourceArn: [, input.ResourceArn],
                    TagKeys: [function () { return input.TagKeys !== void 0; }, function () { return (input.TagKeys || []).map(function (_entry) { return _entry; }); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ConfigurationSetName", function () { return input.ConfigurationSetName; }, "{ConfigurationSetName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EventDestinationName", function () { return input.EventDestinationName; }, "{EventDestinationName}", false);
                body = JSON.stringify(__assign({}, (input.EventDestination != null && {
                    EventDestination: serializeAws_restJson1EventDestinationDefinition(input.EventDestination, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateContactCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailAddress", function () { return input.EmailAddress; }, "{EmailAddress}", false);
                body = JSON.stringify(__assign(__assign(__assign({}, (input.AttributesData != null && { AttributesData: input.AttributesData })), (input.TopicPreferences != null && {
                    TopicPreferences: serializeAws_restJson1TopicPreferenceList(input.TopicPreferences, context),
                })), (input.UnsubscribeAll != null && { UnsubscribeAll: input.UnsubscribeAll })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateContactListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/contact-lists/{ContactListName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ContactListName", function () { return input.ContactListName; }, "{ContactListName}", false);
                body = JSON.stringify(__assign(__assign({}, (input.Description != null && { Description: input.Description })), (input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/custom-verification-email-templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.FailureRedirectionURL != null && { FailureRedirectionURL: input.FailureRedirectionURL })), (input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress })), (input.SuccessRedirectionURL != null && { SuccessRedirectionURL: input.SuccessRedirectionURL })), (input.TemplateContent != null && { TemplateContent: input.TemplateContent })), (input.TemplateSubject != null && { TemplateSubject: input.TemplateSubject })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEmailIdentityPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "EmailIdentity", function () { return input.EmailIdentity; }, "{EmailIdentity}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "PolicyName", function () { return input.PolicyName; }, "{PolicyName}", false);
                body = JSON.stringify(__assign({}, (input.Policy != null && { Policy: input.Policy })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v2/email/templates/{TemplateName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                body = JSON.stringify(__assign({}, (input.TemplateContent != null && {
                    TemplateContent: serializeAws_restJson1EmailTemplateContent(input.TemplateContent, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var deserializeAws_restJson1CreateConfigurationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateConfigurationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateConfigurationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "ConcurrentModificationException": return [3, 6];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateConfigurationSetEventDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateConfigurationSetEventDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateConfigurationSetEventDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateContactCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateContactCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateContactCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateContactListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateContactListCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateContactListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateDedicatedIpPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateDedicatedIpPoolCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateDedicatedIpPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "ConcurrentModificationException": return [3, 6];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateDeliverabilityTestReportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateDeliverabilityTestReportCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DeliverabilityTestStatus != null) {
                    contents.DeliverabilityTestStatus = __expectString(data.DeliverabilityTestStatus);
                }
                if (data.ReportId != null) {
                    contents.ReportId = __expectString(data.ReportId);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateDeliverabilityTestReportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccountSuspendedException": return [3, 2];
                    case "com.amazonaws.sesv2#AccountSuspendedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "ConcurrentModificationException": return [3, 6];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 8];
                    case "MailFromDomainNotVerifiedException": return [3, 10];
                    case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException": return [3, 10];
                    case "MessageRejected": return [3, 12];
                    case "com.amazonaws.sesv2#MessageRejected": return [3, 12];
                    case "NotFoundException": return [3, 14];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 14];
                    case "SendingPausedException": return [3, 16];
                    case "com.amazonaws.sesv2#SendingPausedException": return [3, 16];
                    case "TooManyRequestsException": return [3, 18];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 18];
                }
                return [3, 20];
            case 2: return [4, deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 19: throw _d.sent();
            case 20:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 21;
            case 21: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateEmailIdentityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateEmailIdentityCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DkimAttributes != null) {
                    contents.DkimAttributes = deserializeAws_restJson1DkimAttributes(data.DkimAttributes, context);
                }
                if (data.IdentityType != null) {
                    contents.IdentityType = __expectString(data.IdentityType);
                }
                if (data.VerifiedForSendingStatus != null) {
                    contents.VerifiedForSendingStatus = __expectBoolean(data.VerifiedForSendingStatus);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateEmailIdentityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "ConcurrentModificationException": return [3, 6];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateEmailIdentityPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateEmailIdentityPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateEmailIdentityPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateImportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateImportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.JobId != null) {
                    contents.JobId = __expectString(data.JobId);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateImportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "LimitExceededException": return [3, 4];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteConfigurationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteConfigurationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteConfigurationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteContactCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteContactCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteContactCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteContactListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteContactListCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteContactListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteDedicatedIpPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteDedicatedIpPoolCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteDedicatedIpPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEmailIdentityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEmailIdentityCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEmailIdentityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEmailIdentityPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEmailIdentityPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEmailIdentityPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteSuppressedDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteSuppressedDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteSuppressedDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetAccountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetAccountCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DedicatedIpAutoWarmupEnabled != null) {
                    contents.DedicatedIpAutoWarmupEnabled = __expectBoolean(data.DedicatedIpAutoWarmupEnabled);
                }
                if (data.Details != null) {
                    contents.Details = deserializeAws_restJson1AccountDetails(data.Details, context);
                }
                if (data.EnforcementStatus != null) {
                    contents.EnforcementStatus = __expectString(data.EnforcementStatus);
                }
                if (data.ProductionAccessEnabled != null) {
                    contents.ProductionAccessEnabled = __expectBoolean(data.ProductionAccessEnabled);
                }
                if (data.SendQuota != null) {
                    contents.SendQuota = deserializeAws_restJson1SendQuota(data.SendQuota, context);
                }
                if (data.SendingEnabled != null) {
                    contents.SendingEnabled = __expectBoolean(data.SendingEnabled);
                }
                if (data.SuppressionAttributes != null) {
                    contents.SuppressionAttributes = deserializeAws_restJson1SuppressionAttributes(data.SuppressionAttributes, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetAccountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetBlacklistReportsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetBlacklistReportsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.BlacklistReport != null) {
                    contents.BlacklistReport = deserializeAws_restJson1BlacklistReport(data.BlacklistReport, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetBlacklistReportsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetConfigurationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetConfigurationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ConfigurationSetName != null) {
                    contents.ConfigurationSetName = __expectString(data.ConfigurationSetName);
                }
                if (data.DeliveryOptions != null) {
                    contents.DeliveryOptions = deserializeAws_restJson1DeliveryOptions(data.DeliveryOptions, context);
                }
                if (data.ReputationOptions != null) {
                    contents.ReputationOptions = deserializeAws_restJson1ReputationOptions(data.ReputationOptions, context);
                }
                if (data.SendingOptions != null) {
                    contents.SendingOptions = deserializeAws_restJson1SendingOptions(data.SendingOptions, context);
                }
                if (data.SuppressionOptions != null) {
                    contents.SuppressionOptions = deserializeAws_restJson1SuppressionOptions(data.SuppressionOptions, context);
                }
                if (data.Tags != null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                if (data.TrackingOptions != null) {
                    contents.TrackingOptions = deserializeAws_restJson1TrackingOptions(data.TrackingOptions, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetConfigurationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetConfigurationSetEventDestinationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetConfigurationSetEventDestinationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.EventDestinations != null) {
                    contents.EventDestinations = deserializeAws_restJson1EventDestinations(data.EventDestinations, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetConfigurationSetEventDestinationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetContactCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetContactCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.AttributesData != null) {
                    contents.AttributesData = __expectString(data.AttributesData);
                }
                if (data.ContactListName != null) {
                    contents.ContactListName = __expectString(data.ContactListName);
                }
                if (data.CreatedTimestamp != null) {
                    contents.CreatedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.CreatedTimestamp)));
                }
                if (data.EmailAddress != null) {
                    contents.EmailAddress = __expectString(data.EmailAddress);
                }
                if (data.LastUpdatedTimestamp != null) {
                    contents.LastUpdatedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastUpdatedTimestamp)));
                }
                if (data.TopicDefaultPreferences != null) {
                    contents.TopicDefaultPreferences = deserializeAws_restJson1TopicPreferenceList(data.TopicDefaultPreferences, context);
                }
                if (data.TopicPreferences != null) {
                    contents.TopicPreferences = deserializeAws_restJson1TopicPreferenceList(data.TopicPreferences, context);
                }
                if (data.UnsubscribeAll != null) {
                    contents.UnsubscribeAll = __expectBoolean(data.UnsubscribeAll);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetContactCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetContactListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetContactListCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ContactListName != null) {
                    contents.ContactListName = __expectString(data.ContactListName);
                }
                if (data.CreatedTimestamp != null) {
                    contents.CreatedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.CreatedTimestamp)));
                }
                if (data.Description != null) {
                    contents.Description = __expectString(data.Description);
                }
                if (data.LastUpdatedTimestamp != null) {
                    contents.LastUpdatedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.LastUpdatedTimestamp)));
                }
                if (data.Tags != null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                if (data.Topics != null) {
                    contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetContactListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCustomVerificationEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCustomVerificationEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.FailureRedirectionURL != null) {
                    contents.FailureRedirectionURL = __expectString(data.FailureRedirectionURL);
                }
                if (data.FromEmailAddress != null) {
                    contents.FromEmailAddress = __expectString(data.FromEmailAddress);
                }
                if (data.SuccessRedirectionURL != null) {
                    contents.SuccessRedirectionURL = __expectString(data.SuccessRedirectionURL);
                }
                if (data.TemplateContent != null) {
                    contents.TemplateContent = __expectString(data.TemplateContent);
                }
                if (data.TemplateName != null) {
                    contents.TemplateName = __expectString(data.TemplateName);
                }
                if (data.TemplateSubject != null) {
                    contents.TemplateSubject = __expectString(data.TemplateSubject);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCustomVerificationEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDedicatedIpCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDedicatedIpCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DedicatedIp != null) {
                    contents.DedicatedIp = deserializeAws_restJson1DedicatedIp(data.DedicatedIp, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDedicatedIpCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDedicatedIpsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDedicatedIpsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DedicatedIps != null) {
                    contents.DedicatedIps = deserializeAws_restJson1DedicatedIpList(data.DedicatedIps, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDedicatedIpsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.AccountStatus != null) {
                    contents.AccountStatus = __expectString(data.AccountStatus);
                }
                if (data.ActiveSubscribedDomains != null) {
                    contents.ActiveSubscribedDomains = deserializeAws_restJson1DomainDeliverabilityTrackingOptions(data.ActiveSubscribedDomains, context);
                }
                if (data.DashboardEnabled != null) {
                    contents.DashboardEnabled = __expectBoolean(data.DashboardEnabled);
                }
                if (data.PendingExpirationSubscribedDomains != null) {
                    contents.PendingExpirationSubscribedDomains = deserializeAws_restJson1DomainDeliverabilityTrackingOptions(data.PendingExpirationSubscribedDomains, context);
                }
                if (data.SubscriptionExpiryDate != null) {
                    contents.SubscriptionExpiryDate = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.SubscriptionExpiryDate)));
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "LimitExceededException": return [3, 4];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDeliverabilityTestReportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDeliverabilityTestReportCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DeliverabilityTestReport != null) {
                    contents.DeliverabilityTestReport = deserializeAws_restJson1DeliverabilityTestReport(data.DeliverabilityTestReport, context);
                }
                if (data.IspPlacements != null) {
                    contents.IspPlacements = deserializeAws_restJson1IspPlacements(data.IspPlacements, context);
                }
                if (data.Message != null) {
                    contents.Message = __expectString(data.Message);
                }
                if (data.OverallPlacement != null) {
                    contents.OverallPlacement = deserializeAws_restJson1PlacementStatistics(data.OverallPlacement, context);
                }
                if (data.Tags != null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDeliverabilityTestReportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDomainDeliverabilityCampaignCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDomainDeliverabilityCampaignCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DomainDeliverabilityCampaign != null) {
                    contents.DomainDeliverabilityCampaign = deserializeAws_restJson1DomainDeliverabilityCampaign(data.DomainDeliverabilityCampaign, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDomainDeliverabilityCampaignCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetDomainStatisticsReportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetDomainStatisticsReportCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DailyVolumes != null) {
                    contents.DailyVolumes = deserializeAws_restJson1DailyVolumes(data.DailyVolumes, context);
                }
                if (data.OverallVolume != null) {
                    contents.OverallVolume = deserializeAws_restJson1OverallVolume(data.OverallVolume, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetDomainStatisticsReportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEmailIdentityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEmailIdentityCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ConfigurationSetName != null) {
                    contents.ConfigurationSetName = __expectString(data.ConfigurationSetName);
                }
                if (data.DkimAttributes != null) {
                    contents.DkimAttributes = deserializeAws_restJson1DkimAttributes(data.DkimAttributes, context);
                }
                if (data.FeedbackForwardingStatus != null) {
                    contents.FeedbackForwardingStatus = __expectBoolean(data.FeedbackForwardingStatus);
                }
                if (data.IdentityType != null) {
                    contents.IdentityType = __expectString(data.IdentityType);
                }
                if (data.MailFromAttributes != null) {
                    contents.MailFromAttributes = deserializeAws_restJson1MailFromAttributes(data.MailFromAttributes, context);
                }
                if (data.Policies != null) {
                    contents.Policies = deserializeAws_restJson1PolicyMap(data.Policies, context);
                }
                if (data.Tags != null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                if (data.VerifiedForSendingStatus != null) {
                    contents.VerifiedForSendingStatus = __expectBoolean(data.VerifiedForSendingStatus);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEmailIdentityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEmailIdentityPoliciesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEmailIdentityPoliciesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Policies != null) {
                    contents.Policies = deserializeAws_restJson1PolicyMap(data.Policies, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEmailIdentityPoliciesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.TemplateContent != null) {
                    contents.TemplateContent = deserializeAws_restJson1EmailTemplateContent(data.TemplateContent, context);
                }
                if (data.TemplateName != null) {
                    contents.TemplateName = __expectString(data.TemplateName);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetImportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetImportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CompletedTimestamp != null) {
                    contents.CompletedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.CompletedTimestamp)));
                }
                if (data.CreatedTimestamp != null) {
                    contents.CreatedTimestamp = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.CreatedTimestamp)));
                }
                if (data.FailedRecordsCount != null) {
                    contents.FailedRecordsCount = __expectInt32(data.FailedRecordsCount);
                }
                if (data.FailureInfo != null) {
                    contents.FailureInfo = deserializeAws_restJson1FailureInfo(data.FailureInfo, context);
                }
                if (data.ImportDataSource != null) {
                    contents.ImportDataSource = deserializeAws_restJson1ImportDataSource(data.ImportDataSource, context);
                }
                if (data.ImportDestination != null) {
                    contents.ImportDestination = deserializeAws_restJson1ImportDestination(data.ImportDestination, context);
                }
                if (data.JobId != null) {
                    contents.JobId = __expectString(data.JobId);
                }
                if (data.JobStatus != null) {
                    contents.JobStatus = __expectString(data.JobStatus);
                }
                if (data.ProcessedRecordsCount != null) {
                    contents.ProcessedRecordsCount = __expectInt32(data.ProcessedRecordsCount);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetImportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSuppressedDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSuppressedDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.SuppressedDestination != null) {
                    contents.SuppressedDestination = deserializeAws_restJson1SuppressedDestination(data.SuppressedDestination, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSuppressedDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListConfigurationSetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListConfigurationSetsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ConfigurationSets != null) {
                    contents.ConfigurationSets = deserializeAws_restJson1ConfigurationSetNameList(data.ConfigurationSets, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListConfigurationSetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListContactListsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListContactListsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ContactLists != null) {
                    contents.ContactLists = deserializeAws_restJson1ListOfContactLists(data.ContactLists, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListContactListsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListContactsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListContactsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Contacts != null) {
                    contents.Contacts = deserializeAws_restJson1ListOfContacts(data.Contacts, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListContactsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CustomVerificationEmailTemplates != null) {
                    contents.CustomVerificationEmailTemplates = deserializeAws_restJson1CustomVerificationEmailTemplatesList(data.CustomVerificationEmailTemplates, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListDedicatedIpPoolsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListDedicatedIpPoolsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DedicatedIpPools != null) {
                    contents.DedicatedIpPools = deserializeAws_restJson1ListOfDedicatedIpPools(data.DedicatedIpPools, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListDedicatedIpPoolsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListDeliverabilityTestReportsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListDeliverabilityTestReportsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DeliverabilityTestReports != null) {
                    contents.DeliverabilityTestReports = deserializeAws_restJson1DeliverabilityTestReports(data.DeliverabilityTestReports, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListDeliverabilityTestReportsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DomainDeliverabilityCampaigns != null) {
                    contents.DomainDeliverabilityCampaigns = deserializeAws_restJson1DomainDeliverabilityCampaignList(data.DomainDeliverabilityCampaigns, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListEmailIdentitiesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListEmailIdentitiesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.EmailIdentities != null) {
                    contents.EmailIdentities = deserializeAws_restJson1IdentityInfoList(data.EmailIdentities, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListEmailIdentitiesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListEmailTemplatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListEmailTemplatesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                if (data.TemplatesMetadata != null) {
                    contents.TemplatesMetadata = deserializeAws_restJson1EmailTemplateMetadataList(data.TemplatesMetadata, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListEmailTemplatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListImportJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListImportJobsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ImportJobs != null) {
                    contents.ImportJobs = deserializeAws_restJson1ImportJobSummaryList(data.ImportJobs, context);
                }
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListImportJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListSuppressedDestinationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListSuppressedDestinationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.NextToken != null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                if (data.SuppressedDestinationSummaries != null) {
                    contents.SuppressedDestinationSummaries = deserializeAws_restJson1SuppressedDestinationSummaries(data.SuppressedDestinationSummaries, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListSuppressedDestinationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "InvalidNextTokenException": return [3, 4];
                    case "com.amazonaws.sesv2#InvalidNextTokenException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Tags != null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutAccountDetailsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutAccountDetailsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutAccountDetailsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.sesv2#ConflictException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutAccountSendingAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutAccountSendingAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutAccountSendingAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutAccountSuppressionAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutAccountSuppressionAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutAccountSuppressionAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutConfigurationSetReputationOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutConfigurationSetReputationOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutConfigurationSetReputationOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutConfigurationSetSendingOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutConfigurationSetSendingOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutConfigurationSetSendingOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutDedicatedIpInPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutDedicatedIpInPoolCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutDedicatedIpInPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutDeliverabilityDashboardOptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutDeliverabilityDashboardOptionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutDeliverabilityDashboardOptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AlreadyExistsException": return [3, 2];
                    case "com.amazonaws.sesv2#AlreadyExistsException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEmailIdentityDkimAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEmailIdentityDkimAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEmailIdentityDkimAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DkimStatus != null) {
                    contents.DkimStatus = __expectString(data.DkimStatus);
                }
                if (data.DkimTokens != null) {
                    contents.DkimTokens = deserializeAws_restJson1DnsTokenList(data.DkimTokens, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutSuppressedDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutSuppressedDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutSuppressedDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "TooManyRequestsException": return [3, 4];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendBulkEmailCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendBulkEmailCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.BulkEmailEntryResults != null) {
                    contents.BulkEmailEntryResults = deserializeAws_restJson1BulkEmailEntryResultList(data.BulkEmailEntryResults, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendBulkEmailCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccountSuspendedException": return [3, 2];
                    case "com.amazonaws.sesv2#AccountSuspendedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "MailFromDomainNotVerifiedException": return [3, 8];
                    case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException": return [3, 8];
                    case "MessageRejected": return [3, 10];
                    case "com.amazonaws.sesv2#MessageRejected": return [3, 10];
                    case "NotFoundException": return [3, 12];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 12];
                    case "SendingPausedException": return [3, 14];
                    case "com.amazonaws.sesv2#SendingPausedException": return [3, 14];
                    case "TooManyRequestsException": return [3, 16];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 19;
            case 19: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendCustomVerificationEmailCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendCustomVerificationEmailCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.MessageId != null) {
                    contents.MessageId = __expectString(data.MessageId);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendCustomVerificationEmailCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "LimitExceededException": return [3, 4];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 4];
                    case "MailFromDomainNotVerifiedException": return [3, 6];
                    case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException": return [3, 6];
                    case "MessageRejected": return [3, 8];
                    case "com.amazonaws.sesv2#MessageRejected": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 10];
                    case "SendingPausedException": return [3, 12];
                    case "com.amazonaws.sesv2#SendingPausedException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendEmailCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendEmailCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.MessageId != null) {
                    contents.MessageId = __expectString(data.MessageId);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendEmailCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccountSuspendedException": return [3, 2];
                    case "com.amazonaws.sesv2#AccountSuspendedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.sesv2#LimitExceededException": return [3, 6];
                    case "MailFromDomainNotVerifiedException": return [3, 8];
                    case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException": return [3, 8];
                    case "MessageRejected": return [3, 10];
                    case "com.amazonaws.sesv2#MessageRejected": return [3, 10];
                    case "NotFoundException": return [3, 12];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 12];
                    case "SendingPausedException": return [3, 14];
                    case "com.amazonaws.sesv2#SendingPausedException": return [3, 14];
                    case "TooManyRequestsException": return [3, 16];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 19;
            case 19: return [2];
        }
    });
}); };
export var deserializeAws_restJson1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1TagResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1TestRenderEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1TestRenderEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.RenderedTemplate != null) {
                    contents.RenderedTemplate = __expectString(data.RenderedTemplate);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1TestRenderEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UntagResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateContactCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateContactCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateContactCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateContactListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateContactListCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateContactListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "ConcurrentModificationException": return [3, 4];
                    case "com.amazonaws.sesv2#ConcurrentModificationException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEmailIdentityPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEmailIdentityPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEmailIdentityPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.sesv2#BadRequestException": return [3, 2];
                    case "NotFoundException": return [3, 4];
                    case "com.amazonaws.sesv2#NotFoundException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.sesv2#TooManyRequestsException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
var map = __map;
var deserializeAws_restJson1AccountSuspendedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new AccountSuspendedException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1AlreadyExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new AlreadyExistsException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new BadRequestException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ConcurrentModificationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new ConcurrentModificationException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new ConflictException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1InvalidNextTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new InvalidNextTokenException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new LimitExceededException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new MailFromDomainNotVerifiedException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1MessageRejectedResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new MessageRejected(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new NotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1SendingPausedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new SendingPausedException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new TooManyRequestsException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var serializeAws_restJson1AdditionalContactEmailAddresses = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1Body = function (input, context) {
    return __assign(__assign({}, (input.Html != null && { Html: serializeAws_restJson1Content(input.Html, context) })), (input.Text != null && { Text: serializeAws_restJson1Content(input.Text, context) }));
};
var serializeAws_restJson1BulkEmailContent = function (input, context) {
    return __assign({}, (input.Template != null && { Template: serializeAws_restJson1Template(input.Template, context) }));
};
var serializeAws_restJson1BulkEmailEntry = function (input, context) {
    return __assign(__assign(__assign({}, (input.Destination != null && { Destination: serializeAws_restJson1Destination(input.Destination, context) })), (input.ReplacementEmailContent != null && {
        ReplacementEmailContent: serializeAws_restJson1ReplacementEmailContent(input.ReplacementEmailContent, context),
    })), (input.ReplacementTags != null && {
        ReplacementTags: serializeAws_restJson1MessageTagList(input.ReplacementTags, context),
    }));
};
var serializeAws_restJson1BulkEmailEntryList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1BulkEmailEntry(entry, context);
    });
};
var serializeAws_restJson1CloudWatchDestination = function (input, context) {
    return __assign({}, (input.DimensionConfigurations != null && {
        DimensionConfigurations: serializeAws_restJson1CloudWatchDimensionConfigurations(input.DimensionConfigurations, context),
    }));
};
var serializeAws_restJson1CloudWatchDimensionConfiguration = function (input, context) {
    return __assign(__assign(__assign({}, (input.DefaultDimensionValue != null && { DefaultDimensionValue: input.DefaultDimensionValue })), (input.DimensionName != null && { DimensionName: input.DimensionName })), (input.DimensionValueSource != null && { DimensionValueSource: input.DimensionValueSource }));
};
var serializeAws_restJson1CloudWatchDimensionConfigurations = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1CloudWatchDimensionConfiguration(entry, context);
    });
};
var serializeAws_restJson1ContactListDestination = function (input, context) {
    return __assign(__assign({}, (input.ContactListImportAction != null && { ContactListImportAction: input.ContactListImportAction })), (input.ContactListName != null && { ContactListName: input.ContactListName }));
};
var serializeAws_restJson1Content = function (input, context) {
    return __assign(__assign({}, (input.Charset != null && { Charset: input.Charset })), (input.Data != null && { Data: input.Data }));
};
var serializeAws_restJson1DeliveryOptions = function (input, context) {
    return __assign(__assign({}, (input.SendingPoolName != null && { SendingPoolName: input.SendingPoolName })), (input.TlsPolicy != null && { TlsPolicy: input.TlsPolicy }));
};
var serializeAws_restJson1Destination = function (input, context) {
    return __assign(__assign(__assign({}, (input.BccAddresses != null && {
        BccAddresses: serializeAws_restJson1EmailAddressList(input.BccAddresses, context),
    })), (input.CcAddresses != null && {
        CcAddresses: serializeAws_restJson1EmailAddressList(input.CcAddresses, context),
    })), (input.ToAddresses != null && {
        ToAddresses: serializeAws_restJson1EmailAddressList(input.ToAddresses, context),
    }));
};
var serializeAws_restJson1DkimSigningAttributes = function (input, context) {
    return __assign(__assign(__assign({}, (input.DomainSigningPrivateKey != null && { DomainSigningPrivateKey: input.DomainSigningPrivateKey })), (input.DomainSigningSelector != null && { DomainSigningSelector: input.DomainSigningSelector })), (input.NextSigningKeyLength != null && { NextSigningKeyLength: input.NextSigningKeyLength }));
};
var serializeAws_restJson1DomainDeliverabilityTrackingOption = function (input, context) {
    return __assign(__assign(__assign({}, (input.Domain != null && { Domain: input.Domain })), (input.InboxPlacementTrackingOption != null && {
        InboxPlacementTrackingOption: serializeAws_restJson1InboxPlacementTrackingOption(input.InboxPlacementTrackingOption, context),
    })), (input.SubscriptionStartDate != null && {
        SubscriptionStartDate: Math.round(input.SubscriptionStartDate.getTime() / 1000),
    }));
};
var serializeAws_restJson1DomainDeliverabilityTrackingOptions = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1DomainDeliverabilityTrackingOption(entry, context);
    });
};
var serializeAws_restJson1EmailAddressList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1EmailContent = function (input, context) {
    return __assign(__assign(__assign({}, (input.Raw != null && { Raw: serializeAws_restJson1RawMessage(input.Raw, context) })), (input.Simple != null && { Simple: serializeAws_restJson1Message(input.Simple, context) })), (input.Template != null && { Template: serializeAws_restJson1Template(input.Template, context) }));
};
var serializeAws_restJson1EmailTemplateContent = function (input, context) {
    return __assign(__assign(__assign({}, (input.Html != null && { Html: input.Html })), (input.Subject != null && { Subject: input.Subject })), (input.Text != null && { Text: input.Text }));
};
var serializeAws_restJson1EventDestinationDefinition = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign({}, (input.CloudWatchDestination != null && {
        CloudWatchDestination: serializeAws_restJson1CloudWatchDestination(input.CloudWatchDestination, context),
    })), (input.Enabled != null && { Enabled: input.Enabled })), (input.KinesisFirehoseDestination != null && {
        KinesisFirehoseDestination: serializeAws_restJson1KinesisFirehoseDestination(input.KinesisFirehoseDestination, context),
    })), (input.MatchingEventTypes != null && {
        MatchingEventTypes: serializeAws_restJson1EventTypes(input.MatchingEventTypes, context),
    })), (input.PinpointDestination != null && {
        PinpointDestination: serializeAws_restJson1PinpointDestination(input.PinpointDestination, context),
    })), (input.SnsDestination != null && {
        SnsDestination: serializeAws_restJson1SnsDestination(input.SnsDestination, context),
    }));
};
var serializeAws_restJson1EventTypes = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1ImportDataSource = function (input, context) {
    return __assign(__assign({}, (input.DataFormat != null && { DataFormat: input.DataFormat })), (input.S3Url != null && { S3Url: input.S3Url }));
};
var serializeAws_restJson1ImportDestination = function (input, context) {
    return __assign(__assign({}, (input.ContactListDestination != null && {
        ContactListDestination: serializeAws_restJson1ContactListDestination(input.ContactListDestination, context),
    })), (input.SuppressionListDestination != null && {
        SuppressionListDestination: serializeAws_restJson1SuppressionListDestination(input.SuppressionListDestination, context),
    }));
};
var serializeAws_restJson1InboxPlacementTrackingOption = function (input, context) {
    return __assign(__assign({}, (input.Global != null && { Global: input.Global })), (input.TrackedIsps != null && { TrackedIsps: serializeAws_restJson1IspNameList(input.TrackedIsps, context) }));
};
var serializeAws_restJson1IspNameList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1KinesisFirehoseDestination = function (input, context) {
    return __assign(__assign({}, (input.DeliveryStreamArn != null && { DeliveryStreamArn: input.DeliveryStreamArn })), (input.IamRoleArn != null && { IamRoleArn: input.IamRoleArn }));
};
var serializeAws_restJson1ListContactsFilter = function (input, context) {
    return __assign(__assign({}, (input.FilteredStatus != null && { FilteredStatus: input.FilteredStatus })), (input.TopicFilter != null && { TopicFilter: serializeAws_restJson1TopicFilter(input.TopicFilter, context) }));
};
var serializeAws_restJson1ListManagementOptions = function (input, context) {
    return __assign(__assign({}, (input.ContactListName != null && { ContactListName: input.ContactListName })), (input.TopicName != null && { TopicName: input.TopicName }));
};
var serializeAws_restJson1Message = function (input, context) {
    return __assign(__assign({}, (input.Body != null && { Body: serializeAws_restJson1Body(input.Body, context) })), (input.Subject != null && { Subject: serializeAws_restJson1Content(input.Subject, context) }));
};
var serializeAws_restJson1MessageTag = function (input, context) {
    return __assign(__assign({}, (input.Name != null && { Name: input.Name })), (input.Value != null && { Value: input.Value }));
};
var serializeAws_restJson1MessageTagList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1MessageTag(entry, context);
    });
};
var serializeAws_restJson1PinpointDestination = function (input, context) {
    return __assign({}, (input.ApplicationArn != null && { ApplicationArn: input.ApplicationArn }));
};
var serializeAws_restJson1RawMessage = function (input, context) {
    return __assign({}, (input.Data != null && { Data: context.base64Encoder(input.Data) }));
};
var serializeAws_restJson1ReplacementEmailContent = function (input, context) {
    return __assign({}, (input.ReplacementTemplate != null && {
        ReplacementTemplate: serializeAws_restJson1ReplacementTemplate(input.ReplacementTemplate, context),
    }));
};
var serializeAws_restJson1ReplacementTemplate = function (input, context) {
    return __assign({}, (input.ReplacementTemplateData != null && { ReplacementTemplateData: input.ReplacementTemplateData }));
};
var serializeAws_restJson1ReputationOptions = function (input, context) {
    return __assign(__assign({}, (input.LastFreshStart != null && { LastFreshStart: Math.round(input.LastFreshStart.getTime() / 1000) })), (input.ReputationMetricsEnabled != null && { ReputationMetricsEnabled: input.ReputationMetricsEnabled }));
};
var serializeAws_restJson1SendingOptions = function (input, context) {
    return __assign({}, (input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled }));
};
var serializeAws_restJson1SnsDestination = function (input, context) {
    return __assign({}, (input.TopicArn != null && { TopicArn: input.TopicArn }));
};
var serializeAws_restJson1SuppressionListDestination = function (input, context) {
    return __assign({}, (input.SuppressionListImportAction != null && {
        SuppressionListImportAction: input.SuppressionListImportAction,
    }));
};
var serializeAws_restJson1SuppressionListReasons = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1SuppressionOptions = function (input, context) {
    return __assign({}, (input.SuppressedReasons != null && {
        SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
    }));
};
var serializeAws_restJson1Tag = function (input, context) {
    return __assign(__assign({}, (input.Key != null && { Key: input.Key })), (input.Value != null && { Value: input.Value }));
};
var serializeAws_restJson1TagList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1Tag(entry, context);
    });
};
var serializeAws_restJson1Template = function (input, context) {
    return __assign(__assign(__assign({}, (input.TemplateArn != null && { TemplateArn: input.TemplateArn })), (input.TemplateData != null && { TemplateData: input.TemplateData })), (input.TemplateName != null && { TemplateName: input.TemplateName }));
};
var serializeAws_restJson1Topic = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.DefaultSubscriptionStatus != null && { DefaultSubscriptionStatus: input.DefaultSubscriptionStatus })), (input.Description != null && { Description: input.Description })), (input.DisplayName != null && { DisplayName: input.DisplayName })), (input.TopicName != null && { TopicName: input.TopicName }));
};
var serializeAws_restJson1TopicFilter = function (input, context) {
    return __assign(__assign({}, (input.TopicName != null && { TopicName: input.TopicName })), (input.UseDefaultIfPreferenceUnavailable != null && {
        UseDefaultIfPreferenceUnavailable: input.UseDefaultIfPreferenceUnavailable,
    }));
};
var serializeAws_restJson1TopicPreference = function (input, context) {
    return __assign(__assign({}, (input.SubscriptionStatus != null && { SubscriptionStatus: input.SubscriptionStatus })), (input.TopicName != null && { TopicName: input.TopicName }));
};
var serializeAws_restJson1TopicPreferenceList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1TopicPreference(entry, context);
    });
};
var serializeAws_restJson1Topics = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1Topic(entry, context);
    });
};
var serializeAws_restJson1TrackingOptions = function (input, context) {
    return __assign({}, (input.CustomRedirectDomain != null && { CustomRedirectDomain: input.CustomRedirectDomain }));
};
var deserializeAws_restJson1AccountDetails = function (output, context) {
    return {
        AdditionalContactEmailAddresses: output.AdditionalContactEmailAddresses != null
            ? deserializeAws_restJson1AdditionalContactEmailAddresses(output.AdditionalContactEmailAddresses, context)
            : undefined,
        ContactLanguage: __expectString(output.ContactLanguage),
        MailType: __expectString(output.MailType),
        ReviewDetails: output.ReviewDetails != null ? deserializeAws_restJson1ReviewDetails(output.ReviewDetails, context) : undefined,
        UseCaseDescription: __expectString(output.UseCaseDescription),
        WebsiteURL: __expectString(output.WebsiteURL),
    };
};
var deserializeAws_restJson1AdditionalContactEmailAddresses = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1BlacklistEntries = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BlacklistEntry(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1BlacklistEntry = function (output, context) {
    return {
        Description: __expectString(output.Description),
        ListingTime: output.ListingTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ListingTime)))
            : undefined,
        RblName: __expectString(output.RblName),
    };
};
var deserializeAws_restJson1BlacklistReport = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_restJson1BlacklistEntries(value, context), _b));
    }, {});
};
var deserializeAws_restJson1BulkEmailEntryResult = function (output, context) {
    return {
        Error: __expectString(output.Error),
        MessageId: __expectString(output.MessageId),
        Status: __expectString(output.Status),
    };
};
var deserializeAws_restJson1BulkEmailEntryResultList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BulkEmailEntryResult(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1CloudWatchDestination = function (output, context) {
    return {
        DimensionConfigurations: output.DimensionConfigurations != null
            ? deserializeAws_restJson1CloudWatchDimensionConfigurations(output.DimensionConfigurations, context)
            : undefined,
    };
};
var deserializeAws_restJson1CloudWatchDimensionConfiguration = function (output, context) {
    return {
        DefaultDimensionValue: __expectString(output.DefaultDimensionValue),
        DimensionName: __expectString(output.DimensionName),
        DimensionValueSource: __expectString(output.DimensionValueSource),
    };
};
var deserializeAws_restJson1CloudWatchDimensionConfigurations = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CloudWatchDimensionConfiguration(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ConfigurationSetNameList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1Contact = function (output, context) {
    return {
        EmailAddress: __expectString(output.EmailAddress),
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        TopicDefaultPreferences: output.TopicDefaultPreferences != null
            ? deserializeAws_restJson1TopicPreferenceList(output.TopicDefaultPreferences, context)
            : undefined,
        TopicPreferences: output.TopicPreferences != null
            ? deserializeAws_restJson1TopicPreferenceList(output.TopicPreferences, context)
            : undefined,
        UnsubscribeAll: __expectBoolean(output.UnsubscribeAll),
    };
};
var deserializeAws_restJson1ContactList = function (output, context) {
    return {
        ContactListName: __expectString(output.ContactListName),
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
    };
};
var deserializeAws_restJson1ContactListDestination = function (output, context) {
    return {
        ContactListImportAction: __expectString(output.ContactListImportAction),
        ContactListName: __expectString(output.ContactListName),
    };
};
var deserializeAws_restJson1CustomVerificationEmailTemplateMetadata = function (output, context) {
    return {
        FailureRedirectionURL: __expectString(output.FailureRedirectionURL),
        FromEmailAddress: __expectString(output.FromEmailAddress),
        SuccessRedirectionURL: __expectString(output.SuccessRedirectionURL),
        TemplateName: __expectString(output.TemplateName),
        TemplateSubject: __expectString(output.TemplateSubject),
    };
};
var deserializeAws_restJson1CustomVerificationEmailTemplatesList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CustomVerificationEmailTemplateMetadata(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DailyVolume = function (output, context) {
    return {
        DomainIspPlacements: output.DomainIspPlacements != null
            ? deserializeAws_restJson1DomainIspPlacements(output.DomainIspPlacements, context)
            : undefined,
        StartDate: output.StartDate != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartDate))) : undefined,
        VolumeStatistics: output.VolumeStatistics != null
            ? deserializeAws_restJson1VolumeStatistics(output.VolumeStatistics, context)
            : undefined,
    };
};
var deserializeAws_restJson1DailyVolumes = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DailyVolume(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DedicatedIp = function (output, context) {
    return {
        Ip: __expectString(output.Ip),
        PoolName: __expectString(output.PoolName),
        WarmupPercentage: __expectInt32(output.WarmupPercentage),
        WarmupStatus: __expectString(output.WarmupStatus),
    };
};
var deserializeAws_restJson1DedicatedIpList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DedicatedIp(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DeliverabilityTestReport = function (output, context) {
    return {
        CreateDate: output.CreateDate != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreateDate))) : undefined,
        DeliverabilityTestStatus: __expectString(output.DeliverabilityTestStatus),
        FromEmailAddress: __expectString(output.FromEmailAddress),
        ReportId: __expectString(output.ReportId),
        ReportName: __expectString(output.ReportName),
        Subject: __expectString(output.Subject),
    };
};
var deserializeAws_restJson1DeliverabilityTestReports = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DeliverabilityTestReport(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DeliveryOptions = function (output, context) {
    return {
        SendingPoolName: __expectString(output.SendingPoolName),
        TlsPolicy: __expectString(output.TlsPolicy),
    };
};
var deserializeAws_restJson1DkimAttributes = function (output, context) {
    return {
        CurrentSigningKeyLength: __expectString(output.CurrentSigningKeyLength),
        LastKeyGenerationTimestamp: output.LastKeyGenerationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastKeyGenerationTimestamp)))
            : undefined,
        NextSigningKeyLength: __expectString(output.NextSigningKeyLength),
        SigningAttributesOrigin: __expectString(output.SigningAttributesOrigin),
        SigningEnabled: __expectBoolean(output.SigningEnabled),
        Status: __expectString(output.Status),
        Tokens: output.Tokens != null ? deserializeAws_restJson1DnsTokenList(output.Tokens, context) : undefined,
    };
};
var deserializeAws_restJson1DnsTokenList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1DomainDeliverabilityCampaign = function (output, context) {
    return {
        CampaignId: __expectString(output.CampaignId),
        DeleteRate: __limitedParseDouble(output.DeleteRate),
        Esps: output.Esps != null ? deserializeAws_restJson1Esps(output.Esps, context) : undefined,
        FirstSeenDateTime: output.FirstSeenDateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.FirstSeenDateTime)))
            : undefined,
        FromAddress: __expectString(output.FromAddress),
        ImageUrl: __expectString(output.ImageUrl),
        InboxCount: __expectLong(output.InboxCount),
        LastSeenDateTime: output.LastSeenDateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastSeenDateTime)))
            : undefined,
        ProjectedVolume: __expectLong(output.ProjectedVolume),
        ReadDeleteRate: __limitedParseDouble(output.ReadDeleteRate),
        ReadRate: __limitedParseDouble(output.ReadRate),
        SendingIps: output.SendingIps != null ? deserializeAws_restJson1IpList(output.SendingIps, context) : undefined,
        SpamCount: __expectLong(output.SpamCount),
        Subject: __expectString(output.Subject),
    };
};
var deserializeAws_restJson1DomainDeliverabilityCampaignList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainDeliverabilityCampaign(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DomainDeliverabilityTrackingOption = function (output, context) {
    return {
        Domain: __expectString(output.Domain),
        InboxPlacementTrackingOption: output.InboxPlacementTrackingOption != null
            ? deserializeAws_restJson1InboxPlacementTrackingOption(output.InboxPlacementTrackingOption, context)
            : undefined,
        SubscriptionStartDate: output.SubscriptionStartDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.SubscriptionStartDate)))
            : undefined,
    };
};
var deserializeAws_restJson1DomainDeliverabilityTrackingOptions = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainDeliverabilityTrackingOption(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1DomainIspPlacement = function (output, context) {
    return {
        InboxPercentage: __limitedParseDouble(output.InboxPercentage),
        InboxRawCount: __expectLong(output.InboxRawCount),
        IspName: __expectString(output.IspName),
        SpamPercentage: __limitedParseDouble(output.SpamPercentage),
        SpamRawCount: __expectLong(output.SpamRawCount),
    };
};
var deserializeAws_restJson1DomainIspPlacements = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainIspPlacement(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1EmailTemplateContent = function (output, context) {
    return {
        Html: __expectString(output.Html),
        Subject: __expectString(output.Subject),
        Text: __expectString(output.Text),
    };
};
var deserializeAws_restJson1EmailTemplateMetadata = function (output, context) {
    return {
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        TemplateName: __expectString(output.TemplateName),
    };
};
var deserializeAws_restJson1EmailTemplateMetadataList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EmailTemplateMetadata(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Esps = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1EventDestination = function (output, context) {
    return {
        CloudWatchDestination: output.CloudWatchDestination != null
            ? deserializeAws_restJson1CloudWatchDestination(output.CloudWatchDestination, context)
            : undefined,
        Enabled: __expectBoolean(output.Enabled),
        KinesisFirehoseDestination: output.KinesisFirehoseDestination != null
            ? deserializeAws_restJson1KinesisFirehoseDestination(output.KinesisFirehoseDestination, context)
            : undefined,
        MatchingEventTypes: output.MatchingEventTypes != null
            ? deserializeAws_restJson1EventTypes(output.MatchingEventTypes, context)
            : undefined,
        Name: __expectString(output.Name),
        PinpointDestination: output.PinpointDestination != null
            ? deserializeAws_restJson1PinpointDestination(output.PinpointDestination, context)
            : undefined,
        SnsDestination: output.SnsDestination != null
            ? deserializeAws_restJson1SnsDestination(output.SnsDestination, context)
            : undefined,
    };
};
var deserializeAws_restJson1EventDestinations = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EventDestination(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1EventTypes = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1FailureInfo = function (output, context) {
    return {
        ErrorMessage: __expectString(output.ErrorMessage),
        FailedRecordsS3Url: __expectString(output.FailedRecordsS3Url),
    };
};
var deserializeAws_restJson1IdentityInfo = function (output, context) {
    return {
        IdentityName: __expectString(output.IdentityName),
        IdentityType: __expectString(output.IdentityType),
        SendingEnabled: __expectBoolean(output.SendingEnabled),
    };
};
var deserializeAws_restJson1IdentityInfoList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1IdentityInfo(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ImportDataSource = function (output, context) {
    return {
        DataFormat: __expectString(output.DataFormat),
        S3Url: __expectString(output.S3Url),
    };
};
var deserializeAws_restJson1ImportDestination = function (output, context) {
    return {
        ContactListDestination: output.ContactListDestination != null
            ? deserializeAws_restJson1ContactListDestination(output.ContactListDestination, context)
            : undefined,
        SuppressionListDestination: output.SuppressionListDestination != null
            ? deserializeAws_restJson1SuppressionListDestination(output.SuppressionListDestination, context)
            : undefined,
    };
};
var deserializeAws_restJson1ImportJobSummary = function (output, context) {
    return {
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        ImportDestination: output.ImportDestination != null
            ? deserializeAws_restJson1ImportDestination(output.ImportDestination, context)
            : undefined,
        JobId: __expectString(output.JobId),
        JobStatus: __expectString(output.JobStatus),
    };
};
var deserializeAws_restJson1ImportJobSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ImportJobSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1InboxPlacementTrackingOption = function (output, context) {
    return {
        Global: __expectBoolean(output.Global),
        TrackedIsps: output.TrackedIsps != null ? deserializeAws_restJson1IspNameList(output.TrackedIsps, context) : undefined,
    };
};
var deserializeAws_restJson1IpList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1IspNameList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1IspPlacement = function (output, context) {
    return {
        IspName: __expectString(output.IspName),
        PlacementStatistics: output.PlacementStatistics != null
            ? deserializeAws_restJson1PlacementStatistics(output.PlacementStatistics, context)
            : undefined,
    };
};
var deserializeAws_restJson1IspPlacements = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1IspPlacement(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1KinesisFirehoseDestination = function (output, context) {
    return {
        DeliveryStreamArn: __expectString(output.DeliveryStreamArn),
        IamRoleArn: __expectString(output.IamRoleArn),
    };
};
var deserializeAws_restJson1ListOfContactLists = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ContactList(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ListOfContacts = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Contact(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ListOfDedicatedIpPools = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1MailFromAttributes = function (output, context) {
    return {
        BehaviorOnMxFailure: __expectString(output.BehaviorOnMxFailure),
        MailFromDomain: __expectString(output.MailFromDomain),
        MailFromDomainStatus: __expectString(output.MailFromDomainStatus),
    };
};
var deserializeAws_restJson1OverallVolume = function (output, context) {
    return {
        DomainIspPlacements: output.DomainIspPlacements != null
            ? deserializeAws_restJson1DomainIspPlacements(output.DomainIspPlacements, context)
            : undefined,
        ReadRatePercent: __limitedParseDouble(output.ReadRatePercent),
        VolumeStatistics: output.VolumeStatistics != null
            ? deserializeAws_restJson1VolumeStatistics(output.VolumeStatistics, context)
            : undefined,
    };
};
var deserializeAws_restJson1PinpointDestination = function (output, context) {
    return {
        ApplicationArn: __expectString(output.ApplicationArn),
    };
};
var deserializeAws_restJson1PlacementStatistics = function (output, context) {
    return {
        DkimPercentage: __limitedParseDouble(output.DkimPercentage),
        InboxPercentage: __limitedParseDouble(output.InboxPercentage),
        MissingPercentage: __limitedParseDouble(output.MissingPercentage),
        SpamPercentage: __limitedParseDouble(output.SpamPercentage),
        SpfPercentage: __limitedParseDouble(output.SpfPercentage),
    };
};
var deserializeAws_restJson1PolicyMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));
    }, {});
};
var deserializeAws_restJson1ReputationOptions = function (output, context) {
    return {
        LastFreshStart: output.LastFreshStart != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastFreshStart)))
            : undefined,
        ReputationMetricsEnabled: __expectBoolean(output.ReputationMetricsEnabled),
    };
};
var deserializeAws_restJson1ReviewDetails = function (output, context) {
    return {
        CaseId: __expectString(output.CaseId),
        Status: __expectString(output.Status),
    };
};
var deserializeAws_restJson1SendingOptions = function (output, context) {
    return {
        SendingEnabled: __expectBoolean(output.SendingEnabled),
    };
};
var deserializeAws_restJson1SendQuota = function (output, context) {
    return {
        Max24HourSend: __limitedParseDouble(output.Max24HourSend),
        MaxSendRate: __limitedParseDouble(output.MaxSendRate),
        SentLast24Hours: __limitedParseDouble(output.SentLast24Hours),
    };
};
var deserializeAws_restJson1SnsDestination = function (output, context) {
    return {
        TopicArn: __expectString(output.TopicArn),
    };
};
var deserializeAws_restJson1SuppressedDestination = function (output, context) {
    return {
        Attributes: output.Attributes != null
            ? deserializeAws_restJson1SuppressedDestinationAttributes(output.Attributes, context)
            : undefined,
        EmailAddress: __expectString(output.EmailAddress),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        Reason: __expectString(output.Reason),
    };
};
var deserializeAws_restJson1SuppressedDestinationAttributes = function (output, context) {
    return {
        FeedbackId: __expectString(output.FeedbackId),
        MessageId: __expectString(output.MessageId),
    };
};
var deserializeAws_restJson1SuppressedDestinationSummaries = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SuppressedDestinationSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1SuppressedDestinationSummary = function (output, context) {
    return {
        EmailAddress: __expectString(output.EmailAddress),
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        Reason: __expectString(output.Reason),
    };
};
var deserializeAws_restJson1SuppressionAttributes = function (output, context) {
    return {
        SuppressedReasons: output.SuppressedReasons != null
            ? deserializeAws_restJson1SuppressionListReasons(output.SuppressedReasons, context)
            : undefined,
    };
};
var deserializeAws_restJson1SuppressionListDestination = function (output, context) {
    return {
        SuppressionListImportAction: __expectString(output.SuppressionListImportAction),
    };
};
var deserializeAws_restJson1SuppressionListReasons = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1SuppressionOptions = function (output, context) {
    return {
        SuppressedReasons: output.SuppressedReasons != null
            ? deserializeAws_restJson1SuppressionListReasons(output.SuppressedReasons, context)
            : undefined,
    };
};
var deserializeAws_restJson1Tag = function (output, context) {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
var deserializeAws_restJson1TagList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Tag(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Topic = function (output, context) {
    return {
        DefaultSubscriptionStatus: __expectString(output.DefaultSubscriptionStatus),
        Description: __expectString(output.Description),
        DisplayName: __expectString(output.DisplayName),
        TopicName: __expectString(output.TopicName),
    };
};
var deserializeAws_restJson1TopicPreference = function (output, context) {
    return {
        SubscriptionStatus: __expectString(output.SubscriptionStatus),
        TopicName: __expectString(output.TopicName),
    };
};
var deserializeAws_restJson1TopicPreferenceList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1TopicPreference(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Topics = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Topic(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1TrackingOptions = function (output, context) {
    return {
        CustomRedirectDomain: __expectString(output.CustomRedirectDomain),
    };
};
var deserializeAws_restJson1VolumeStatistics = function (output, context) {
    return {
        InboxRawCount: __expectLong(output.InboxRawCount),
        ProjectedInbox: __expectLong(output.ProjectedInbox),
        ProjectedSpam: __expectLong(output.ProjectedSpam),
        SpamRawCount: __expectLong(output.SpamRawCount),
    };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== null &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
