"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_restJson1ListSuppressedDestinationsCommand = exports.serializeAws_restJson1ListImportJobsCommand = exports.serializeAws_restJson1ListEmailTemplatesCommand = exports.serializeAws_restJson1ListEmailIdentitiesCommand = exports.serializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = exports.serializeAws_restJson1ListDeliverabilityTestReportsCommand = exports.serializeAws_restJson1ListDedicatedIpPoolsCommand = exports.serializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = exports.serializeAws_restJson1ListContactsCommand = exports.serializeAws_restJson1ListContactListsCommand = exports.serializeAws_restJson1ListConfigurationSetsCommand = exports.serializeAws_restJson1GetSuppressedDestinationCommand = exports.serializeAws_restJson1GetImportJobCommand = exports.serializeAws_restJson1GetEmailTemplateCommand = exports.serializeAws_restJson1GetEmailIdentityPoliciesCommand = exports.serializeAws_restJson1GetEmailIdentityCommand = exports.serializeAws_restJson1GetDomainStatisticsReportCommand = exports.serializeAws_restJson1GetDomainDeliverabilityCampaignCommand = exports.serializeAws_restJson1GetDeliverabilityTestReportCommand = exports.serializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = exports.serializeAws_restJson1GetDedicatedIpsCommand = exports.serializeAws_restJson1GetDedicatedIpCommand = exports.serializeAws_restJson1GetCustomVerificationEmailTemplateCommand = exports.serializeAws_restJson1GetContactListCommand = exports.serializeAws_restJson1GetContactCommand = exports.serializeAws_restJson1GetConfigurationSetEventDestinationsCommand = exports.serializeAws_restJson1GetConfigurationSetCommand = exports.serializeAws_restJson1GetBlacklistReportsCommand = exports.serializeAws_restJson1GetAccountCommand = exports.serializeAws_restJson1DeleteSuppressedDestinationCommand = exports.serializeAws_restJson1DeleteEmailTemplateCommand = exports.serializeAws_restJson1DeleteEmailIdentityPolicyCommand = exports.serializeAws_restJson1DeleteEmailIdentityCommand = exports.serializeAws_restJson1DeleteDedicatedIpPoolCommand = exports.serializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = exports.serializeAws_restJson1DeleteContactListCommand = exports.serializeAws_restJson1DeleteContactCommand = exports.serializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = exports.serializeAws_restJson1DeleteConfigurationSetCommand = exports.serializeAws_restJson1CreateImportJobCommand = exports.serializeAws_restJson1CreateEmailTemplateCommand = exports.serializeAws_restJson1CreateEmailIdentityPolicyCommand = exports.serializeAws_restJson1CreateEmailIdentityCommand = exports.serializeAws_restJson1CreateDeliverabilityTestReportCommand = exports.serializeAws_restJson1CreateDedicatedIpPoolCommand = exports.serializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = exports.serializeAws_restJson1CreateContactListCommand = exports.serializeAws_restJson1CreateContactCommand = exports.serializeAws_restJson1CreateConfigurationSetEventDestinationCommand = exports.serializeAws_restJson1CreateConfigurationSetCommand = void 0;
exports.deserializeAws_restJson1DeleteEmailIdentityPolicyCommand = exports.deserializeAws_restJson1DeleteEmailIdentityCommand = exports.deserializeAws_restJson1DeleteDedicatedIpPoolCommand = exports.deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = exports.deserializeAws_restJson1DeleteContactListCommand = exports.deserializeAws_restJson1DeleteContactCommand = exports.deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = exports.deserializeAws_restJson1DeleteConfigurationSetCommand = exports.deserializeAws_restJson1CreateImportJobCommand = exports.deserializeAws_restJson1CreateEmailTemplateCommand = exports.deserializeAws_restJson1CreateEmailIdentityPolicyCommand = exports.deserializeAws_restJson1CreateEmailIdentityCommand = exports.deserializeAws_restJson1CreateDeliverabilityTestReportCommand = exports.deserializeAws_restJson1CreateDedicatedIpPoolCommand = exports.deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = exports.deserializeAws_restJson1CreateContactListCommand = exports.deserializeAws_restJson1CreateContactCommand = exports.deserializeAws_restJson1CreateConfigurationSetEventDestinationCommand = exports.deserializeAws_restJson1CreateConfigurationSetCommand = exports.serializeAws_restJson1UpdateEmailTemplateCommand = exports.serializeAws_restJson1UpdateEmailIdentityPolicyCommand = exports.serializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = exports.serializeAws_restJson1UpdateContactListCommand = exports.serializeAws_restJson1UpdateContactCommand = exports.serializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TestRenderEmailTemplateCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1SendEmailCommand = exports.serializeAws_restJson1SendCustomVerificationEmailCommand = exports.serializeAws_restJson1SendBulkEmailCommand = exports.serializeAws_restJson1PutSuppressedDestinationCommand = exports.serializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = exports.serializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = exports.serializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = exports.serializeAws_restJson1PutEmailIdentityDkimAttributesCommand = exports.serializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = exports.serializeAws_restJson1PutDeliverabilityDashboardOptionCommand = exports.serializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = exports.serializeAws_restJson1PutDedicatedIpInPoolCommand = exports.serializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = exports.serializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = exports.serializeAws_restJson1PutConfigurationSetSendingOptionsCommand = exports.serializeAws_restJson1PutConfigurationSetReputationOptionsCommand = exports.serializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = exports.serializeAws_restJson1PutAccountSuppressionAttributesCommand = exports.serializeAws_restJson1PutAccountSendingAttributesCommand = exports.serializeAws_restJson1PutAccountDetailsCommand = exports.serializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = exports.serializeAws_restJson1ListTagsForResourceCommand = void 0;
exports.deserializeAws_restJson1PutSuppressedDestinationCommand = exports.deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = exports.deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = exports.deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = exports.deserializeAws_restJson1PutEmailIdentityDkimAttributesCommand = exports.deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = exports.deserializeAws_restJson1PutDeliverabilityDashboardOptionCommand = exports.deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = exports.deserializeAws_restJson1PutDedicatedIpInPoolCommand = exports.deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = exports.deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = exports.deserializeAws_restJson1PutConfigurationSetSendingOptionsCommand = exports.deserializeAws_restJson1PutConfigurationSetReputationOptionsCommand = exports.deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = exports.deserializeAws_restJson1PutAccountSuppressionAttributesCommand = exports.deserializeAws_restJson1PutAccountSendingAttributesCommand = exports.deserializeAws_restJson1PutAccountDetailsCommand = exports.deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = exports.deserializeAws_restJson1ListTagsForResourceCommand = exports.deserializeAws_restJson1ListSuppressedDestinationsCommand = exports.deserializeAws_restJson1ListImportJobsCommand = exports.deserializeAws_restJson1ListEmailTemplatesCommand = exports.deserializeAws_restJson1ListEmailIdentitiesCommand = exports.deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = exports.deserializeAws_restJson1ListDeliverabilityTestReportsCommand = exports.deserializeAws_restJson1ListDedicatedIpPoolsCommand = exports.deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = exports.deserializeAws_restJson1ListContactsCommand = exports.deserializeAws_restJson1ListContactListsCommand = exports.deserializeAws_restJson1ListConfigurationSetsCommand = exports.deserializeAws_restJson1GetSuppressedDestinationCommand = exports.deserializeAws_restJson1GetImportJobCommand = exports.deserializeAws_restJson1GetEmailTemplateCommand = exports.deserializeAws_restJson1GetEmailIdentityPoliciesCommand = exports.deserializeAws_restJson1GetEmailIdentityCommand = exports.deserializeAws_restJson1GetDomainStatisticsReportCommand = exports.deserializeAws_restJson1GetDomainDeliverabilityCampaignCommand = exports.deserializeAws_restJson1GetDeliverabilityTestReportCommand = exports.deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = exports.deserializeAws_restJson1GetDedicatedIpsCommand = exports.deserializeAws_restJson1GetDedicatedIpCommand = exports.deserializeAws_restJson1GetCustomVerificationEmailTemplateCommand = exports.deserializeAws_restJson1GetContactListCommand = exports.deserializeAws_restJson1GetContactCommand = exports.deserializeAws_restJson1GetConfigurationSetEventDestinationsCommand = exports.deserializeAws_restJson1GetConfigurationSetCommand = exports.deserializeAws_restJson1GetBlacklistReportsCommand = exports.deserializeAws_restJson1GetAccountCommand = exports.deserializeAws_restJson1DeleteSuppressedDestinationCommand = exports.deserializeAws_restJson1DeleteEmailTemplateCommand = void 0;
exports.deserializeAws_restJson1UpdateEmailTemplateCommand = exports.deserializeAws_restJson1UpdateEmailIdentityPolicyCommand = exports.deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = exports.deserializeAws_restJson1UpdateContactListCommand = exports.deserializeAws_restJson1UpdateContactCommand = exports.deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TestRenderEmailTemplateCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1SendEmailCommand = exports.deserializeAws_restJson1SendCustomVerificationEmailCommand = exports.deserializeAws_restJson1SendBulkEmailCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const SESv2ServiceException_1 = require("../models/SESv2ServiceException");
const serializeAws_restJson1CreateConfigurationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/configuration-sets";
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
        ...(input.DeliveryOptions != null && {
            DeliveryOptions: serializeAws_restJson1DeliveryOptions(input.DeliveryOptions, context),
        }),
        ...(input.ReputationOptions != null && {
            ReputationOptions: serializeAws_restJson1ReputationOptions(input.ReputationOptions, context),
        }),
        ...(input.SendingOptions != null && {
            SendingOptions: serializeAws_restJson1SendingOptions(input.SendingOptions, context),
        }),
        ...(input.SuppressionOptions != null && {
            SuppressionOptions: serializeAws_restJson1SuppressionOptions(input.SuppressionOptions, context),
        }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
        ...(input.TrackingOptions != null && {
            TrackingOptions: serializeAws_restJson1TrackingOptions(input.TrackingOptions, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateConfigurationSetCommand = serializeAws_restJson1CreateConfigurationSetCommand;
const serializeAws_restJson1CreateConfigurationSetEventDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.EventDestination != null && {
            EventDestination: serializeAws_restJson1EventDestinationDefinition(input.EventDestination, context),
        }),
        ...(input.EventDestinationName != null && { EventDestinationName: input.EventDestinationName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateConfigurationSetEventDestinationCommand = serializeAws_restJson1CreateConfigurationSetEventDestinationCommand;
const serializeAws_restJson1CreateContactCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/contact-lists/{ContactListName}/contacts";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    let body;
    body = JSON.stringify({
        ...(input.AttributesData != null && { AttributesData: input.AttributesData }),
        ...(input.EmailAddress != null && { EmailAddress: input.EmailAddress }),
        ...(input.TopicPreferences != null && {
            TopicPreferences: serializeAws_restJson1TopicPreferenceList(input.TopicPreferences, context),
        }),
        ...(input.UnsubscribeAll != null && { UnsubscribeAll: input.UnsubscribeAll }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateContactCommand = serializeAws_restJson1CreateContactCommand;
const serializeAws_restJson1CreateContactListCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/contact-lists";
    let body;
    body = JSON.stringify({
        ...(input.ContactListName != null && { ContactListName: input.ContactListName }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
        ...(input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateContactListCommand = serializeAws_restJson1CreateContactListCommand;
const serializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/custom-verification-email-templates";
    let body;
    body = JSON.stringify({
        ...(input.FailureRedirectionURL != null && { FailureRedirectionURL: input.FailureRedirectionURL }),
        ...(input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress }),
        ...(input.SuccessRedirectionURL != null && { SuccessRedirectionURL: input.SuccessRedirectionURL }),
        ...(input.TemplateContent != null && { TemplateContent: input.TemplateContent }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
        ...(input.TemplateSubject != null && { TemplateSubject: input.TemplateSubject }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = serializeAws_restJson1CreateCustomVerificationEmailTemplateCommand;
const serializeAws_restJson1CreateDedicatedIpPoolCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ip-pools";
    let body;
    body = JSON.stringify({
        ...(input.PoolName != null && { PoolName: input.PoolName }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDedicatedIpPoolCommand = serializeAws_restJson1CreateDedicatedIpPoolCommand;
const serializeAws_restJson1CreateDeliverabilityTestReportCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/deliverability-dashboard/test";
    let body;
    body = JSON.stringify({
        ...(input.Content != null && { Content: serializeAws_restJson1EmailContent(input.Content, context) }),
        ...(input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress }),
        ...(input.ReportName != null && { ReportName: input.ReportName }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDeliverabilityTestReportCommand = serializeAws_restJson1CreateDeliverabilityTestReportCommand;
const serializeAws_restJson1CreateEmailIdentityCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/identities";
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
        ...(input.DkimSigningAttributes != null && {
            DkimSigningAttributes: serializeAws_restJson1DkimSigningAttributes(input.DkimSigningAttributes, context),
        }),
        ...(input.EmailIdentity != null && { EmailIdentity: input.EmailIdentity }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEmailIdentityCommand = serializeAws_restJson1CreateEmailIdentityCommand;
const serializeAws_restJson1CreateEmailIdentityPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PolicyName", () => input.PolicyName, "{PolicyName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Policy != null && { Policy: input.Policy }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEmailIdentityPolicyCommand = serializeAws_restJson1CreateEmailIdentityPolicyCommand;
const serializeAws_restJson1CreateEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates";
    let body;
    body = JSON.stringify({
        ...(input.TemplateContent != null && {
            TemplateContent: serializeAws_restJson1EmailTemplateContent(input.TemplateContent, context),
        }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEmailTemplateCommand = serializeAws_restJson1CreateEmailTemplateCommand;
const serializeAws_restJson1CreateImportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/import-jobs";
    let body;
    body = JSON.stringify({
        ...(input.ImportDataSource != null && {
            ImportDataSource: serializeAws_restJson1ImportDataSource(input.ImportDataSource, context),
        }),
        ...(input.ImportDestination != null && {
            ImportDestination: serializeAws_restJson1ImportDestination(input.ImportDestination, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateImportJobCommand = serializeAws_restJson1CreateImportJobCommand;
const serializeAws_restJson1DeleteConfigurationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteConfigurationSetCommand = serializeAws_restJson1DeleteConfigurationSetCommand;
const serializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EventDestinationName", () => input.EventDestinationName, "{EventDestinationName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = serializeAws_restJson1DeleteConfigurationSetEventDestinationCommand;
const serializeAws_restJson1DeleteContactCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailAddress", () => input.EmailAddress, "{EmailAddress}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteContactCommand = serializeAws_restJson1DeleteContactCommand;
const serializeAws_restJson1DeleteContactListCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/contact-lists/{ContactListName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteContactListCommand = serializeAws_restJson1DeleteContactListCommand;
const serializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/custom-verification-email-templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = serializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand;
const serializeAws_restJson1DeleteDedicatedIpPoolCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ip-pools/{PoolName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PoolName", () => input.PoolName, "{PoolName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDedicatedIpPoolCommand = serializeAws_restJson1DeleteDedicatedIpPoolCommand;
const serializeAws_restJson1DeleteEmailIdentityCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/identities/{EmailIdentity}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEmailIdentityCommand = serializeAws_restJson1DeleteEmailIdentityCommand;
const serializeAws_restJson1DeleteEmailIdentityPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PolicyName", () => input.PolicyName, "{PolicyName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEmailIdentityPolicyCommand = serializeAws_restJson1DeleteEmailIdentityPolicyCommand;
const serializeAws_restJson1DeleteEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEmailTemplateCommand = serializeAws_restJson1DeleteEmailTemplateCommand;
const serializeAws_restJson1DeleteSuppressedDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/suppression/addresses/{EmailAddress}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailAddress", () => input.EmailAddress, "{EmailAddress}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteSuppressedDestinationCommand = serializeAws_restJson1DeleteSuppressedDestinationCommand;
const serializeAws_restJson1GetAccountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/account";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAccountCommand = serializeAws_restJson1GetAccountCommand;
const serializeAws_restJson1GetBlacklistReportsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/blacklist-report";
    const query = map({
        BlacklistItemNames: [
            () => input.BlacklistItemNames !== void 0,
            () => (input.BlacklistItemNames || []).map((_entry) => _entry),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetBlacklistReportsCommand = serializeAws_restJson1GetBlacklistReportsCommand;
const serializeAws_restJson1GetConfigurationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetConfigurationSetCommand = serializeAws_restJson1GetConfigurationSetCommand;
const serializeAws_restJson1GetConfigurationSetEventDestinationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetConfigurationSetEventDestinationsCommand = serializeAws_restJson1GetConfigurationSetEventDestinationsCommand;
const serializeAws_restJson1GetContactCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailAddress", () => input.EmailAddress, "{EmailAddress}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetContactCommand = serializeAws_restJson1GetContactCommand;
const serializeAws_restJson1GetContactListCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/contact-lists/{ContactListName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetContactListCommand = serializeAws_restJson1GetContactListCommand;
const serializeAws_restJson1GetCustomVerificationEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/custom-verification-email-templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetCustomVerificationEmailTemplateCommand = serializeAws_restJson1GetCustomVerificationEmailTemplateCommand;
const serializeAws_restJson1GetDedicatedIpCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ips/{Ip}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Ip", () => input.Ip, "{Ip}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDedicatedIpCommand = serializeAws_restJson1GetDedicatedIpCommand;
const serializeAws_restJson1GetDedicatedIpsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ips";
    const query = map({
        PoolName: [, input.PoolName],
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDedicatedIpsCommand = serializeAws_restJson1GetDedicatedIpsCommand;
const serializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/deliverability-dashboard";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = serializeAws_restJson1GetDeliverabilityDashboardOptionsCommand;
const serializeAws_restJson1GetDeliverabilityTestReportCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/test-reports/{ReportId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ReportId", () => input.ReportId, "{ReportId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDeliverabilityTestReportCommand = serializeAws_restJson1GetDeliverabilityTestReportCommand;
const serializeAws_restJson1GetDomainDeliverabilityCampaignCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/campaigns/{CampaignId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDomainDeliverabilityCampaignCommand = serializeAws_restJson1GetDomainDeliverabilityCampaignCommand;
const serializeAws_restJson1GetDomainStatisticsReportCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/statistics-report/{Domain}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Domain", () => input.Domain, "{Domain}", false);
    const query = map({
        StartDate: [
            () => input.StartDate !== void 0,
            () => (input.StartDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        EndDate: [() => input.EndDate !== void 0, () => (input.EndDate.toISOString().split(".")[0] + "Z").toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDomainStatisticsReportCommand = serializeAws_restJson1GetDomainStatisticsReportCommand;
const serializeAws_restJson1GetEmailIdentityCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/identities/{EmailIdentity}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEmailIdentityCommand = serializeAws_restJson1GetEmailIdentityCommand;
const serializeAws_restJson1GetEmailIdentityPoliciesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/policies";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEmailIdentityPoliciesCommand = serializeAws_restJson1GetEmailIdentityPoliciesCommand;
const serializeAws_restJson1GetEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEmailTemplateCommand = serializeAws_restJson1GetEmailTemplateCommand;
const serializeAws_restJson1GetImportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/import-jobs/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetImportJobCommand = serializeAws_restJson1GetImportJobCommand;
const serializeAws_restJson1GetSuppressedDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/suppression/addresses/{EmailAddress}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailAddress", () => input.EmailAddress, "{EmailAddress}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetSuppressedDestinationCommand = serializeAws_restJson1GetSuppressedDestinationCommand;
const serializeAws_restJson1ListConfigurationSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/configuration-sets";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListConfigurationSetsCommand = serializeAws_restJson1ListConfigurationSetsCommand;
const serializeAws_restJson1ListContactListsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/contact-lists";
    const query = map({
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
        NextToken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListContactListsCommand = serializeAws_restJson1ListContactListsCommand;
const serializeAws_restJson1ListContactsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/contact-lists/{ContactListName}/contacts";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    const query = map({
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
        NextToken: [, input.NextToken],
    });
    let body;
    body = JSON.stringify({
        ...(input.Filter != null && { Filter: serializeAws_restJson1ListContactsFilter(input.Filter, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListContactsCommand = serializeAws_restJson1ListContactsCommand;
const serializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/custom-verification-email-templates";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = serializeAws_restJson1ListCustomVerificationEmailTemplatesCommand;
const serializeAws_restJson1ListDedicatedIpPoolsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ip-pools";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDedicatedIpPoolsCommand = serializeAws_restJson1ListDedicatedIpPoolsCommand;
const serializeAws_restJson1ListDeliverabilityTestReportsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/test-reports";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDeliverabilityTestReportsCommand = serializeAws_restJson1ListDeliverabilityTestReportsCommand;
const serializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SubscribedDomain", () => input.SubscribedDomain, "{SubscribedDomain}", false);
    const query = map({
        StartDate: [
            () => input.StartDate !== void 0,
            () => (input.StartDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        EndDate: [() => input.EndDate !== void 0, () => (input.EndDate.toISOString().split(".")[0] + "Z").toString()],
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = serializeAws_restJson1ListDomainDeliverabilityCampaignsCommand;
const serializeAws_restJson1ListEmailIdentitiesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/identities";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListEmailIdentitiesCommand = serializeAws_restJson1ListEmailIdentitiesCommand;
const serializeAws_restJson1ListEmailTemplatesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListEmailTemplatesCommand = serializeAws_restJson1ListEmailTemplatesCommand;
const serializeAws_restJson1ListImportJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/import-jobs";
    const query = map({
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    body = JSON.stringify({
        ...(input.ImportDestinationType != null && { ImportDestinationType: input.ImportDestinationType }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListImportJobsCommand = serializeAws_restJson1ListImportJobsCommand;
const serializeAws_restJson1ListSuppressedDestinationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/suppression/addresses";
    const query = map({
        Reason: [() => input.Reasons !== void 0, () => (input.Reasons || []).map((_entry) => _entry)],
        StartDate: [
            () => input.StartDate !== void 0,
            () => (input.StartDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        EndDate: [() => input.EndDate !== void 0, () => (input.EndDate.toISOString().split(".")[0] + "Z").toString()],
        NextToken: [, input.NextToken],
        PageSize: [() => input.PageSize !== void 0, () => input.PageSize.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListSuppressedDestinationsCommand = serializeAws_restJson1ListSuppressedDestinationsCommand;
const serializeAws_restJson1ListTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/tags";
    const query = map({
        ResourceArn: [, input.ResourceArn],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListTagsForResourceCommand = serializeAws_restJson1ListTagsForResourceCommand;
const serializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/account/dedicated-ips/warmup";
    let body;
    body = JSON.stringify({
        ...(input.AutoWarmupEnabled != null && { AutoWarmupEnabled: input.AutoWarmupEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = serializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand;
const serializeAws_restJson1PutAccountDetailsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/account/details";
    let body;
    body = JSON.stringify({
        ...(input.AdditionalContactEmailAddresses != null && {
            AdditionalContactEmailAddresses: serializeAws_restJson1AdditionalContactEmailAddresses(input.AdditionalContactEmailAddresses, context),
        }),
        ...(input.ContactLanguage != null && { ContactLanguage: input.ContactLanguage }),
        ...(input.MailType != null && { MailType: input.MailType }),
        ...(input.ProductionAccessEnabled != null && { ProductionAccessEnabled: input.ProductionAccessEnabled }),
        ...(input.UseCaseDescription != null && { UseCaseDescription: input.UseCaseDescription }),
        ...(input.WebsiteURL != null && { WebsiteURL: input.WebsiteURL }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutAccountDetailsCommand = serializeAws_restJson1PutAccountDetailsCommand;
const serializeAws_restJson1PutAccountSendingAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/account/sending";
    let body;
    body = JSON.stringify({
        ...(input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutAccountSendingAttributesCommand = serializeAws_restJson1PutAccountSendingAttributesCommand;
const serializeAws_restJson1PutAccountSuppressionAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/account/suppression";
    let body;
    body = JSON.stringify({
        ...(input.SuppressedReasons != null && {
            SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutAccountSuppressionAttributesCommand = serializeAws_restJson1PutAccountSuppressionAttributesCommand;
const serializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/delivery-options";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.SendingPoolName != null && { SendingPoolName: input.SendingPoolName }),
        ...(input.TlsPolicy != null && { TlsPolicy: input.TlsPolicy }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = serializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand;
const serializeAws_restJson1PutConfigurationSetReputationOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/reputation-options";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.ReputationMetricsEnabled != null && { ReputationMetricsEnabled: input.ReputationMetricsEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutConfigurationSetReputationOptionsCommand = serializeAws_restJson1PutConfigurationSetReputationOptionsCommand;
const serializeAws_restJson1PutConfigurationSetSendingOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/sending";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutConfigurationSetSendingOptionsCommand = serializeAws_restJson1PutConfigurationSetSendingOptionsCommand;
const serializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/suppression-options";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.SuppressedReasons != null && {
            SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = serializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand;
const serializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/tracking-options";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CustomRedirectDomain != null && { CustomRedirectDomain: input.CustomRedirectDomain }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = serializeAws_restJson1PutConfigurationSetTrackingOptionsCommand;
const serializeAws_restJson1PutDedicatedIpInPoolCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ips/{Ip}/pool";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Ip", () => input.Ip, "{Ip}", false);
    let body;
    body = JSON.stringify({
        ...(input.DestinationPoolName != null && { DestinationPoolName: input.DestinationPoolName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutDedicatedIpInPoolCommand = serializeAws_restJson1PutDedicatedIpInPoolCommand;
const serializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/dedicated-ips/{Ip}/warmup";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Ip", () => input.Ip, "{Ip}", false);
    let body;
    body = JSON.stringify({
        ...(input.WarmupPercentage != null && { WarmupPercentage: input.WarmupPercentage }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = serializeAws_restJson1PutDedicatedIpWarmupAttributesCommand;
const serializeAws_restJson1PutDeliverabilityDashboardOptionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/deliverability-dashboard";
    let body;
    body = JSON.stringify({
        ...(input.DashboardEnabled != null && { DashboardEnabled: input.DashboardEnabled }),
        ...(input.SubscribedDomains != null && {
            SubscribedDomains: serializeAws_restJson1DomainDeliverabilityTrackingOptions(input.SubscribedDomains, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutDeliverabilityDashboardOptionCommand = serializeAws_restJson1PutDeliverabilityDashboardOptionCommand;
const serializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/configuration-set";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = serializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand;
const serializeAws_restJson1PutEmailIdentityDkimAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/identities/{EmailIdentity}/dkim";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    body = JSON.stringify({
        ...(input.SigningEnabled != null && { SigningEnabled: input.SigningEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEmailIdentityDkimAttributesCommand = serializeAws_restJson1PutEmailIdentityDkimAttributesCommand;
const serializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/email/identities/{EmailIdentity}/dkim/signing";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    body = JSON.stringify({
        ...(input.SigningAttributes != null && {
            SigningAttributes: serializeAws_restJson1DkimSigningAttributes(input.SigningAttributes, context),
        }),
        ...(input.SigningAttributesOrigin != null && { SigningAttributesOrigin: input.SigningAttributesOrigin }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = serializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand;
const serializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/feedback";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    body = JSON.stringify({
        ...(input.EmailForwardingEnabled != null && { EmailForwardingEnabled: input.EmailForwardingEnabled }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = serializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand;
const serializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/mail-from";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    let body;
    body = JSON.stringify({
        ...(input.BehaviorOnMxFailure != null && { BehaviorOnMxFailure: input.BehaviorOnMxFailure }),
        ...(input.MailFromDomain != null && { MailFromDomain: input.MailFromDomain }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = serializeAws_restJson1PutEmailIdentityMailFromAttributesCommand;
const serializeAws_restJson1PutSuppressedDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/suppression/addresses";
    let body;
    body = JSON.stringify({
        ...(input.EmailAddress != null && { EmailAddress: input.EmailAddress }),
        ...(input.Reason != null && { Reason: input.Reason }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutSuppressedDestinationCommand = serializeAws_restJson1PutSuppressedDestinationCommand;
const serializeAws_restJson1SendBulkEmailCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/outbound-bulk-emails";
    let body;
    body = JSON.stringify({
        ...(input.BulkEmailEntries != null && {
            BulkEmailEntries: serializeAws_restJson1BulkEmailEntryList(input.BulkEmailEntries, context),
        }),
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
        ...(input.DefaultContent != null && {
            DefaultContent: serializeAws_restJson1BulkEmailContent(input.DefaultContent, context),
        }),
        ...(input.DefaultEmailTags != null && {
            DefaultEmailTags: serializeAws_restJson1MessageTagList(input.DefaultEmailTags, context),
        }),
        ...(input.FeedbackForwardingEmailAddress != null && {
            FeedbackForwardingEmailAddress: input.FeedbackForwardingEmailAddress,
        }),
        ...(input.FeedbackForwardingEmailAddressIdentityArn != null && {
            FeedbackForwardingEmailAddressIdentityArn: input.FeedbackForwardingEmailAddressIdentityArn,
        }),
        ...(input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress }),
        ...(input.FromEmailAddressIdentityArn != null && {
            FromEmailAddressIdentityArn: input.FromEmailAddressIdentityArn,
        }),
        ...(input.ReplyToAddresses != null && {
            ReplyToAddresses: serializeAws_restJson1EmailAddressList(input.ReplyToAddresses, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendBulkEmailCommand = serializeAws_restJson1SendBulkEmailCommand;
const serializeAws_restJson1SendCustomVerificationEmailCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/outbound-custom-verification-emails";
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
        ...(input.EmailAddress != null && { EmailAddress: input.EmailAddress }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendCustomVerificationEmailCommand = serializeAws_restJson1SendCustomVerificationEmailCommand;
const serializeAws_restJson1SendEmailCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/outbound-emails";
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationSetName != null && { ConfigurationSetName: input.ConfigurationSetName }),
        ...(input.Content != null && { Content: serializeAws_restJson1EmailContent(input.Content, context) }),
        ...(input.Destination != null && { Destination: serializeAws_restJson1Destination(input.Destination, context) }),
        ...(input.EmailTags != null && { EmailTags: serializeAws_restJson1MessageTagList(input.EmailTags, context) }),
        ...(input.FeedbackForwardingEmailAddress != null && {
            FeedbackForwardingEmailAddress: input.FeedbackForwardingEmailAddress,
        }),
        ...(input.FeedbackForwardingEmailAddressIdentityArn != null && {
            FeedbackForwardingEmailAddressIdentityArn: input.FeedbackForwardingEmailAddressIdentityArn,
        }),
        ...(input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress }),
        ...(input.FromEmailAddressIdentityArn != null && {
            FromEmailAddressIdentityArn: input.FromEmailAddressIdentityArn,
        }),
        ...(input.ListManagementOptions != null && {
            ListManagementOptions: serializeAws_restJson1ListManagementOptions(input.ListManagementOptions, context),
        }),
        ...(input.ReplyToAddresses != null && {
            ReplyToAddresses: serializeAws_restJson1EmailAddressList(input.ReplyToAddresses, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendEmailCommand = serializeAws_restJson1SendEmailCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/tags";
    let body;
    body = JSON.stringify({
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1TestRenderEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates/{TemplateName}/render";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    body = JSON.stringify({
        ...(input.TemplateData != null && { TemplateData: input.TemplateData }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TestRenderEmailTemplateCommand = serializeAws_restJson1TestRenderEmailTemplateCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/tags";
    const query = map({
        ResourceArn: [, input.ResourceArn],
        TagKeys: [() => input.TagKeys !== void 0, () => (input.TagKeys || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConfigurationSetName", () => input.ConfigurationSetName, "{ConfigurationSetName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EventDestinationName", () => input.EventDestinationName, "{EventDestinationName}", false);
    let body;
    body = JSON.stringify({
        ...(input.EventDestination != null && {
            EventDestination: serializeAws_restJson1EventDestinationDefinition(input.EventDestination, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = serializeAws_restJson1UpdateConfigurationSetEventDestinationCommand;
const serializeAws_restJson1UpdateContactCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailAddress", () => input.EmailAddress, "{EmailAddress}", false);
    let body;
    body = JSON.stringify({
        ...(input.AttributesData != null && { AttributesData: input.AttributesData }),
        ...(input.TopicPreferences != null && {
            TopicPreferences: serializeAws_restJson1TopicPreferenceList(input.TopicPreferences, context),
        }),
        ...(input.UnsubscribeAll != null && { UnsubscribeAll: input.UnsubscribeAll }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateContactCommand = serializeAws_restJson1UpdateContactCommand;
const serializeAws_restJson1UpdateContactListCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/contact-lists/{ContactListName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ContactListName", () => input.ContactListName, "{ContactListName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateContactListCommand = serializeAws_restJson1UpdateContactListCommand;
const serializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/custom-verification-email-templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    body = JSON.stringify({
        ...(input.FailureRedirectionURL != null && { FailureRedirectionURL: input.FailureRedirectionURL }),
        ...(input.FromEmailAddress != null && { FromEmailAddress: input.FromEmailAddress }),
        ...(input.SuccessRedirectionURL != null && { SuccessRedirectionURL: input.SuccessRedirectionURL }),
        ...(input.TemplateContent != null && { TemplateContent: input.TemplateContent }),
        ...(input.TemplateSubject != null && { TemplateSubject: input.TemplateSubject }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = serializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand;
const serializeAws_restJson1UpdateEmailIdentityPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EmailIdentity", () => input.EmailIdentity, "{EmailIdentity}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PolicyName", () => input.PolicyName, "{PolicyName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Policy != null && { Policy: input.Policy }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEmailIdentityPolicyCommand = serializeAws_restJson1UpdateEmailIdentityPolicyCommand;
const serializeAws_restJson1UpdateEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v2/email/templates/{TemplateName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    body = JSON.stringify({
        ...(input.TemplateContent != null && {
            TemplateContent: serializeAws_restJson1EmailTemplateContent(input.TemplateContent, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEmailTemplateCommand = serializeAws_restJson1UpdateEmailTemplateCommand;
const deserializeAws_restJson1CreateConfigurationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateConfigurationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateConfigurationSetCommand = deserializeAws_restJson1CreateConfigurationSetCommand;
const deserializeAws_restJson1CreateConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateConfigurationSetEventDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateConfigurationSetEventDestinationCommand = deserializeAws_restJson1CreateConfigurationSetEventDestinationCommand;
const deserializeAws_restJson1CreateConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateContactCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateContactCommand = deserializeAws_restJson1CreateContactCommand;
const deserializeAws_restJson1CreateContactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateContactListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateContactListCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateContactListCommand = deserializeAws_restJson1CreateContactListCommand;
const deserializeAws_restJson1CreateContactListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommand = deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommand;
const deserializeAws_restJson1CreateCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDedicatedIpPoolCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDedicatedIpPoolCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateDedicatedIpPoolCommand = deserializeAws_restJson1CreateDedicatedIpPoolCommand;
const deserializeAws_restJson1CreateDedicatedIpPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDeliverabilityTestReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDeliverabilityTestReportCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DeliverabilityTestStatus != null) {
        contents.DeliverabilityTestStatus = (0, smithy_client_1.expectString)(data.DeliverabilityTestStatus);
    }
    if (data.ReportId != null) {
        contents.ReportId = (0, smithy_client_1.expectString)(data.ReportId);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDeliverabilityTestReportCommand = deserializeAws_restJson1CreateDeliverabilityTestReportCommand;
const deserializeAws_restJson1CreateDeliverabilityTestReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSuspendedException":
        case "com.amazonaws.sesv2#AccountSuspendedException":
            throw await deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException":
            throw await deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.sesv2#MessageRejected":
            throw await deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "SendingPausedException":
        case "com.amazonaws.sesv2#SendingPausedException":
            throw await deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEmailIdentityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEmailIdentityCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DkimAttributes != null) {
        contents.DkimAttributes = deserializeAws_restJson1DkimAttributes(data.DkimAttributes, context);
    }
    if (data.IdentityType != null) {
        contents.IdentityType = (0, smithy_client_1.expectString)(data.IdentityType);
    }
    if (data.VerifiedForSendingStatus != null) {
        contents.VerifiedForSendingStatus = (0, smithy_client_1.expectBoolean)(data.VerifiedForSendingStatus);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateEmailIdentityCommand = deserializeAws_restJson1CreateEmailIdentityCommand;
const deserializeAws_restJson1CreateEmailIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEmailIdentityPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEmailIdentityPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateEmailIdentityPolicyCommand = deserializeAws_restJson1CreateEmailIdentityPolicyCommand;
const deserializeAws_restJson1CreateEmailIdentityPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CreateEmailTemplateCommand = deserializeAws_restJson1CreateEmailTemplateCommand;
const deserializeAws_restJson1CreateEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateImportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.JobId != null) {
        contents.JobId = (0, smithy_client_1.expectString)(data.JobId);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateImportJobCommand = deserializeAws_restJson1CreateImportJobCommand;
const deserializeAws_restJson1CreateImportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteConfigurationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteConfigurationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteConfigurationSetCommand = deserializeAws_restJson1DeleteConfigurationSetCommand;
const deserializeAws_restJson1DeleteConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommand = deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommand;
const deserializeAws_restJson1DeleteConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteContactCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteContactCommand = deserializeAws_restJson1DeleteContactCommand;
const deserializeAws_restJson1DeleteContactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteContactListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteContactListCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteContactListCommand = deserializeAws_restJson1DeleteContactListCommand;
const deserializeAws_restJson1DeleteContactListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand = deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommand;
const deserializeAws_restJson1DeleteCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDedicatedIpPoolCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDedicatedIpPoolCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDedicatedIpPoolCommand = deserializeAws_restJson1DeleteDedicatedIpPoolCommand;
const deserializeAws_restJson1DeleteDedicatedIpPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEmailIdentityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEmailIdentityCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEmailIdentityCommand = deserializeAws_restJson1DeleteEmailIdentityCommand;
const deserializeAws_restJson1DeleteEmailIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEmailIdentityPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEmailIdentityPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEmailIdentityPolicyCommand = deserializeAws_restJson1DeleteEmailIdentityPolicyCommand;
const deserializeAws_restJson1DeleteEmailIdentityPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEmailTemplateCommand = deserializeAws_restJson1DeleteEmailTemplateCommand;
const deserializeAws_restJson1DeleteEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteSuppressedDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteSuppressedDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteSuppressedDestinationCommand = deserializeAws_restJson1DeleteSuppressedDestinationCommand;
const deserializeAws_restJson1DeleteSuppressedDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAccountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DedicatedIpAutoWarmupEnabled != null) {
        contents.DedicatedIpAutoWarmupEnabled = (0, smithy_client_1.expectBoolean)(data.DedicatedIpAutoWarmupEnabled);
    }
    if (data.Details != null) {
        contents.Details = deserializeAws_restJson1AccountDetails(data.Details, context);
    }
    if (data.EnforcementStatus != null) {
        contents.EnforcementStatus = (0, smithy_client_1.expectString)(data.EnforcementStatus);
    }
    if (data.ProductionAccessEnabled != null) {
        contents.ProductionAccessEnabled = (0, smithy_client_1.expectBoolean)(data.ProductionAccessEnabled);
    }
    if (data.SendQuota != null) {
        contents.SendQuota = deserializeAws_restJson1SendQuota(data.SendQuota, context);
    }
    if (data.SendingEnabled != null) {
        contents.SendingEnabled = (0, smithy_client_1.expectBoolean)(data.SendingEnabled);
    }
    if (data.SuppressionAttributes != null) {
        contents.SuppressionAttributes = deserializeAws_restJson1SuppressionAttributes(data.SuppressionAttributes, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAccountCommand = deserializeAws_restJson1GetAccountCommand;
const deserializeAws_restJson1GetAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetBlacklistReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetBlacklistReportsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.BlacklistReport != null) {
        contents.BlacklistReport = deserializeAws_restJson1BlacklistReport(data.BlacklistReport, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetBlacklistReportsCommand = deserializeAws_restJson1GetBlacklistReportsCommand;
const deserializeAws_restJson1GetBlacklistReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetConfigurationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetConfigurationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ConfigurationSetName != null) {
        contents.ConfigurationSetName = (0, smithy_client_1.expectString)(data.ConfigurationSetName);
    }
    if (data.DeliveryOptions != null) {
        contents.DeliveryOptions = deserializeAws_restJson1DeliveryOptions(data.DeliveryOptions, context);
    }
    if (data.ReputationOptions != null) {
        contents.ReputationOptions = deserializeAws_restJson1ReputationOptions(data.ReputationOptions, context);
    }
    if (data.SendingOptions != null) {
        contents.SendingOptions = deserializeAws_restJson1SendingOptions(data.SendingOptions, context);
    }
    if (data.SuppressionOptions != null) {
        contents.SuppressionOptions = deserializeAws_restJson1SuppressionOptions(data.SuppressionOptions, context);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
    }
    if (data.TrackingOptions != null) {
        contents.TrackingOptions = deserializeAws_restJson1TrackingOptions(data.TrackingOptions, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetConfigurationSetCommand = deserializeAws_restJson1GetConfigurationSetCommand;
const deserializeAws_restJson1GetConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetConfigurationSetEventDestinationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetConfigurationSetEventDestinationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.EventDestinations != null) {
        contents.EventDestinations = deserializeAws_restJson1EventDestinations(data.EventDestinations, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetConfigurationSetEventDestinationsCommand = deserializeAws_restJson1GetConfigurationSetEventDestinationsCommand;
const deserializeAws_restJson1GetConfigurationSetEventDestinationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetContactCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AttributesData != null) {
        contents.AttributesData = (0, smithy_client_1.expectString)(data.AttributesData);
    }
    if (data.ContactListName != null) {
        contents.ContactListName = (0, smithy_client_1.expectString)(data.ContactListName);
    }
    if (data.CreatedTimestamp != null) {
        contents.CreatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.CreatedTimestamp)));
    }
    if (data.EmailAddress != null) {
        contents.EmailAddress = (0, smithy_client_1.expectString)(data.EmailAddress);
    }
    if (data.LastUpdatedTimestamp != null) {
        contents.LastUpdatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastUpdatedTimestamp)));
    }
    if (data.TopicDefaultPreferences != null) {
        contents.TopicDefaultPreferences = deserializeAws_restJson1TopicPreferenceList(data.TopicDefaultPreferences, context);
    }
    if (data.TopicPreferences != null) {
        contents.TopicPreferences = deserializeAws_restJson1TopicPreferenceList(data.TopicPreferences, context);
    }
    if (data.UnsubscribeAll != null) {
        contents.UnsubscribeAll = (0, smithy_client_1.expectBoolean)(data.UnsubscribeAll);
    }
    return contents;
};
exports.deserializeAws_restJson1GetContactCommand = deserializeAws_restJson1GetContactCommand;
const deserializeAws_restJson1GetContactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetContactListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetContactListCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ContactListName != null) {
        contents.ContactListName = (0, smithy_client_1.expectString)(data.ContactListName);
    }
    if (data.CreatedTimestamp != null) {
        contents.CreatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.CreatedTimestamp)));
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.LastUpdatedTimestamp != null) {
        contents.LastUpdatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastUpdatedTimestamp)));
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
    }
    if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetContactListCommand = deserializeAws_restJson1GetContactListCommand;
const deserializeAws_restJson1GetContactListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCustomVerificationEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FailureRedirectionURL != null) {
        contents.FailureRedirectionURL = (0, smithy_client_1.expectString)(data.FailureRedirectionURL);
    }
    if (data.FromEmailAddress != null) {
        contents.FromEmailAddress = (0, smithy_client_1.expectString)(data.FromEmailAddress);
    }
    if (data.SuccessRedirectionURL != null) {
        contents.SuccessRedirectionURL = (0, smithy_client_1.expectString)(data.SuccessRedirectionURL);
    }
    if (data.TemplateContent != null) {
        contents.TemplateContent = (0, smithy_client_1.expectString)(data.TemplateContent);
    }
    if (data.TemplateName != null) {
        contents.TemplateName = (0, smithy_client_1.expectString)(data.TemplateName);
    }
    if (data.TemplateSubject != null) {
        contents.TemplateSubject = (0, smithy_client_1.expectString)(data.TemplateSubject);
    }
    return contents;
};
exports.deserializeAws_restJson1GetCustomVerificationEmailTemplateCommand = deserializeAws_restJson1GetCustomVerificationEmailTemplateCommand;
const deserializeAws_restJson1GetCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDedicatedIpCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDedicatedIpCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DedicatedIp != null) {
        contents.DedicatedIp = deserializeAws_restJson1DedicatedIp(data.DedicatedIp, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDedicatedIpCommand = deserializeAws_restJson1GetDedicatedIpCommand;
const deserializeAws_restJson1GetDedicatedIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDedicatedIpsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDedicatedIpsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DedicatedIps != null) {
        contents.DedicatedIps = deserializeAws_restJson1DedicatedIpList(data.DedicatedIps, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDedicatedIpsCommand = deserializeAws_restJson1GetDedicatedIpsCommand;
const deserializeAws_restJson1GetDedicatedIpsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccountStatus != null) {
        contents.AccountStatus = (0, smithy_client_1.expectString)(data.AccountStatus);
    }
    if (data.ActiveSubscribedDomains != null) {
        contents.ActiveSubscribedDomains = deserializeAws_restJson1DomainDeliverabilityTrackingOptions(data.ActiveSubscribedDomains, context);
    }
    if (data.DashboardEnabled != null) {
        contents.DashboardEnabled = (0, smithy_client_1.expectBoolean)(data.DashboardEnabled);
    }
    if (data.PendingExpirationSubscribedDomains != null) {
        contents.PendingExpirationSubscribedDomains = deserializeAws_restJson1DomainDeliverabilityTrackingOptions(data.PendingExpirationSubscribedDomains, context);
    }
    if (data.SubscriptionExpiryDate != null) {
        contents.SubscriptionExpiryDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.SubscriptionExpiryDate)));
    }
    return contents;
};
exports.deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommand = deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommand;
const deserializeAws_restJson1GetDeliverabilityDashboardOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDeliverabilityTestReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeliverabilityTestReportCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DeliverabilityTestReport != null) {
        contents.DeliverabilityTestReport = deserializeAws_restJson1DeliverabilityTestReport(data.DeliverabilityTestReport, context);
    }
    if (data.IspPlacements != null) {
        contents.IspPlacements = deserializeAws_restJson1IspPlacements(data.IspPlacements, context);
    }
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.OverallPlacement != null) {
        contents.OverallPlacement = deserializeAws_restJson1PlacementStatistics(data.OverallPlacement, context);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDeliverabilityTestReportCommand = deserializeAws_restJson1GetDeliverabilityTestReportCommand;
const deserializeAws_restJson1GetDeliverabilityTestReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDomainDeliverabilityCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDomainDeliverabilityCampaignCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DomainDeliverabilityCampaign != null) {
        contents.DomainDeliverabilityCampaign = deserializeAws_restJson1DomainDeliverabilityCampaign(data.DomainDeliverabilityCampaign, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDomainDeliverabilityCampaignCommand = deserializeAws_restJson1GetDomainDeliverabilityCampaignCommand;
const deserializeAws_restJson1GetDomainDeliverabilityCampaignCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDomainStatisticsReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDomainStatisticsReportCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DailyVolumes != null) {
        contents.DailyVolumes = deserializeAws_restJson1DailyVolumes(data.DailyVolumes, context);
    }
    if (data.OverallVolume != null) {
        contents.OverallVolume = deserializeAws_restJson1OverallVolume(data.OverallVolume, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDomainStatisticsReportCommand = deserializeAws_restJson1GetDomainStatisticsReportCommand;
const deserializeAws_restJson1GetDomainStatisticsReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEmailIdentityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEmailIdentityCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ConfigurationSetName != null) {
        contents.ConfigurationSetName = (0, smithy_client_1.expectString)(data.ConfigurationSetName);
    }
    if (data.DkimAttributes != null) {
        contents.DkimAttributes = deserializeAws_restJson1DkimAttributes(data.DkimAttributes, context);
    }
    if (data.FeedbackForwardingStatus != null) {
        contents.FeedbackForwardingStatus = (0, smithy_client_1.expectBoolean)(data.FeedbackForwardingStatus);
    }
    if (data.IdentityType != null) {
        contents.IdentityType = (0, smithy_client_1.expectString)(data.IdentityType);
    }
    if (data.MailFromAttributes != null) {
        contents.MailFromAttributes = deserializeAws_restJson1MailFromAttributes(data.MailFromAttributes, context);
    }
    if (data.Policies != null) {
        contents.Policies = deserializeAws_restJson1PolicyMap(data.Policies, context);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
    }
    if (data.VerifiedForSendingStatus != null) {
        contents.VerifiedForSendingStatus = (0, smithy_client_1.expectBoolean)(data.VerifiedForSendingStatus);
    }
    return contents;
};
exports.deserializeAws_restJson1GetEmailIdentityCommand = deserializeAws_restJson1GetEmailIdentityCommand;
const deserializeAws_restJson1GetEmailIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEmailIdentityPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEmailIdentityPoliciesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Policies != null) {
        contents.Policies = deserializeAws_restJson1PolicyMap(data.Policies, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetEmailIdentityPoliciesCommand = deserializeAws_restJson1GetEmailIdentityPoliciesCommand;
const deserializeAws_restJson1GetEmailIdentityPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TemplateContent != null) {
        contents.TemplateContent = deserializeAws_restJson1EmailTemplateContent(data.TemplateContent, context);
    }
    if (data.TemplateName != null) {
        contents.TemplateName = (0, smithy_client_1.expectString)(data.TemplateName);
    }
    return contents;
};
exports.deserializeAws_restJson1GetEmailTemplateCommand = deserializeAws_restJson1GetEmailTemplateCommand;
const deserializeAws_restJson1GetEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetImportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CompletedTimestamp != null) {
        contents.CompletedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.CompletedTimestamp)));
    }
    if (data.CreatedTimestamp != null) {
        contents.CreatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.CreatedTimestamp)));
    }
    if (data.FailedRecordsCount != null) {
        contents.FailedRecordsCount = (0, smithy_client_1.expectInt32)(data.FailedRecordsCount);
    }
    if (data.FailureInfo != null) {
        contents.FailureInfo = deserializeAws_restJson1FailureInfo(data.FailureInfo, context);
    }
    if (data.ImportDataSource != null) {
        contents.ImportDataSource = deserializeAws_restJson1ImportDataSource(data.ImportDataSource, context);
    }
    if (data.ImportDestination != null) {
        contents.ImportDestination = deserializeAws_restJson1ImportDestination(data.ImportDestination, context);
    }
    if (data.JobId != null) {
        contents.JobId = (0, smithy_client_1.expectString)(data.JobId);
    }
    if (data.JobStatus != null) {
        contents.JobStatus = (0, smithy_client_1.expectString)(data.JobStatus);
    }
    if (data.ProcessedRecordsCount != null) {
        contents.ProcessedRecordsCount = (0, smithy_client_1.expectInt32)(data.ProcessedRecordsCount);
    }
    return contents;
};
exports.deserializeAws_restJson1GetImportJobCommand = deserializeAws_restJson1GetImportJobCommand;
const deserializeAws_restJson1GetImportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSuppressedDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSuppressedDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.SuppressedDestination != null) {
        contents.SuppressedDestination = deserializeAws_restJson1SuppressedDestination(data.SuppressedDestination, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetSuppressedDestinationCommand = deserializeAws_restJson1GetSuppressedDestinationCommand;
const deserializeAws_restJson1GetSuppressedDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListConfigurationSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListConfigurationSetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ConfigurationSets != null) {
        contents.ConfigurationSets = deserializeAws_restJson1ConfigurationSetNameList(data.ConfigurationSets, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListConfigurationSetsCommand = deserializeAws_restJson1ListConfigurationSetsCommand;
const deserializeAws_restJson1ListConfigurationSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListContactListsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListContactListsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ContactLists != null) {
        contents.ContactLists = deserializeAws_restJson1ListOfContactLists(data.ContactLists, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListContactListsCommand = deserializeAws_restJson1ListContactListsCommand;
const deserializeAws_restJson1ListContactListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListContactsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Contacts != null) {
        contents.Contacts = deserializeAws_restJson1ListOfContacts(data.Contacts, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListContactsCommand = deserializeAws_restJson1ListContactsCommand;
const deserializeAws_restJson1ListContactsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CustomVerificationEmailTemplates != null) {
        contents.CustomVerificationEmailTemplates = deserializeAws_restJson1CustomVerificationEmailTemplatesList(data.CustomVerificationEmailTemplates, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommand = deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommand;
const deserializeAws_restJson1ListCustomVerificationEmailTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListDedicatedIpPoolsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDedicatedIpPoolsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DedicatedIpPools != null) {
        contents.DedicatedIpPools = deserializeAws_restJson1ListOfDedicatedIpPools(data.DedicatedIpPools, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListDedicatedIpPoolsCommand = deserializeAws_restJson1ListDedicatedIpPoolsCommand;
const deserializeAws_restJson1ListDedicatedIpPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListDeliverabilityTestReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDeliverabilityTestReportsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DeliverabilityTestReports != null) {
        contents.DeliverabilityTestReports = deserializeAws_restJson1DeliverabilityTestReports(data.DeliverabilityTestReports, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListDeliverabilityTestReportsCommand = deserializeAws_restJson1ListDeliverabilityTestReportsCommand;
const deserializeAws_restJson1ListDeliverabilityTestReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DomainDeliverabilityCampaigns != null) {
        contents.DomainDeliverabilityCampaigns = deserializeAws_restJson1DomainDeliverabilityCampaignList(data.DomainDeliverabilityCampaigns, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommand = deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommand;
const deserializeAws_restJson1ListDomainDeliverabilityCampaignsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListEmailIdentitiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEmailIdentitiesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.EmailIdentities != null) {
        contents.EmailIdentities = deserializeAws_restJson1IdentityInfoList(data.EmailIdentities, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListEmailIdentitiesCommand = deserializeAws_restJson1ListEmailIdentitiesCommand;
const deserializeAws_restJson1ListEmailIdentitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListEmailTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEmailTemplatesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    if (data.TemplatesMetadata != null) {
        contents.TemplatesMetadata = deserializeAws_restJson1EmailTemplateMetadataList(data.TemplatesMetadata, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListEmailTemplatesCommand = deserializeAws_restJson1ListEmailTemplatesCommand;
const deserializeAws_restJson1ListEmailTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListImportJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ImportJobs != null) {
        contents.ImportJobs = deserializeAws_restJson1ImportJobSummaryList(data.ImportJobs, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListImportJobsCommand = deserializeAws_restJson1ListImportJobsCommand;
const deserializeAws_restJson1ListImportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListSuppressedDestinationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListSuppressedDestinationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    if (data.SuppressedDestinationSummaries != null) {
        contents.SuppressedDestinationSummaries = deserializeAws_restJson1SuppressedDestinationSummaries(data.SuppressedDestinationSummaries, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListSuppressedDestinationsCommand = deserializeAws_restJson1ListSuppressedDestinationsCommand;
const deserializeAws_restJson1ListSuppressedDestinationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.sesv2#InvalidNextTokenException":
            throw await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsForResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListTagsForResourceCommand = deserializeAws_restJson1ListTagsForResourceCommand;
const deserializeAws_restJson1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand = deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommand;
const deserializeAws_restJson1PutAccountDedicatedIpWarmupAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutAccountDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutAccountDetailsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutAccountDetailsCommand = deserializeAws_restJson1PutAccountDetailsCommand;
const deserializeAws_restJson1PutAccountDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.sesv2#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutAccountSendingAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutAccountSendingAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutAccountSendingAttributesCommand = deserializeAws_restJson1PutAccountSendingAttributesCommand;
const deserializeAws_restJson1PutAccountSendingAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutAccountSuppressionAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutAccountSuppressionAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutAccountSuppressionAttributesCommand = deserializeAws_restJson1PutAccountSuppressionAttributesCommand;
const deserializeAws_restJson1PutAccountSuppressionAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand = deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommand;
const deserializeAws_restJson1PutConfigurationSetDeliveryOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutConfigurationSetReputationOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutConfigurationSetReputationOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutConfigurationSetReputationOptionsCommand = deserializeAws_restJson1PutConfigurationSetReputationOptionsCommand;
const deserializeAws_restJson1PutConfigurationSetReputationOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutConfigurationSetSendingOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutConfigurationSetSendingOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutConfigurationSetSendingOptionsCommand = deserializeAws_restJson1PutConfigurationSetSendingOptionsCommand;
const deserializeAws_restJson1PutConfigurationSetSendingOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand = deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommand;
const deserializeAws_restJson1PutConfigurationSetSuppressionOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommand = deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommand;
const deserializeAws_restJson1PutConfigurationSetTrackingOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutDedicatedIpInPoolCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutDedicatedIpInPoolCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutDedicatedIpInPoolCommand = deserializeAws_restJson1PutDedicatedIpInPoolCommand;
const deserializeAws_restJson1PutDedicatedIpInPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommand = deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommand;
const deserializeAws_restJson1PutDedicatedIpWarmupAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutDeliverabilityDashboardOptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutDeliverabilityDashboardOptionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutDeliverabilityDashboardOptionCommand = deserializeAws_restJson1PutDeliverabilityDashboardOptionCommand;
const deserializeAws_restJson1PutDeliverabilityDashboardOptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.sesv2#AlreadyExistsException":
            throw await deserializeAws_restJson1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand = deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommand;
const deserializeAws_restJson1PutEmailIdentityConfigurationSetAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEmailIdentityDkimAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEmailIdentityDkimAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutEmailIdentityDkimAttributesCommand = deserializeAws_restJson1PutEmailIdentityDkimAttributesCommand;
const deserializeAws_restJson1PutEmailIdentityDkimAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DkimStatus != null) {
        contents.DkimStatus = (0, smithy_client_1.expectString)(data.DkimStatus);
    }
    if (data.DkimTokens != null) {
        contents.DkimTokens = deserializeAws_restJson1DnsTokenList(data.DkimTokens, context);
    }
    return contents;
};
exports.deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand = deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommand;
const deserializeAws_restJson1PutEmailIdentityDkimSigningAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand = deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommand;
const deserializeAws_restJson1PutEmailIdentityFeedbackAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommand = deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommand;
const deserializeAws_restJson1PutEmailIdentityMailFromAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutSuppressedDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutSuppressedDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1PutSuppressedDestinationCommand = deserializeAws_restJson1PutSuppressedDestinationCommand;
const deserializeAws_restJson1PutSuppressedDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendBulkEmailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendBulkEmailCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.BulkEmailEntryResults != null) {
        contents.BulkEmailEntryResults = deserializeAws_restJson1BulkEmailEntryResultList(data.BulkEmailEntryResults, context);
    }
    return contents;
};
exports.deserializeAws_restJson1SendBulkEmailCommand = deserializeAws_restJson1SendBulkEmailCommand;
const deserializeAws_restJson1SendBulkEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSuspendedException":
        case "com.amazonaws.sesv2#AccountSuspendedException":
            throw await deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException":
            throw await deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.sesv2#MessageRejected":
            throw await deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "SendingPausedException":
        case "com.amazonaws.sesv2#SendingPausedException":
            throw await deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendCustomVerificationEmailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendCustomVerificationEmailCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.MessageId != null) {
        contents.MessageId = (0, smithy_client_1.expectString)(data.MessageId);
    }
    return contents;
};
exports.deserializeAws_restJson1SendCustomVerificationEmailCommand = deserializeAws_restJson1SendCustomVerificationEmailCommand;
const deserializeAws_restJson1SendCustomVerificationEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException":
            throw await deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.sesv2#MessageRejected":
            throw await deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "SendingPausedException":
        case "com.amazonaws.sesv2#SendingPausedException":
            throw await deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendEmailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendEmailCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.MessageId != null) {
        contents.MessageId = (0, smithy_client_1.expectString)(data.MessageId);
    }
    return contents;
};
exports.deserializeAws_restJson1SendEmailCommand = deserializeAws_restJson1SendEmailCommand;
const deserializeAws_restJson1SendEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSuspendedException":
        case "com.amazonaws.sesv2#AccountSuspendedException":
            throw await deserializeAws_restJson1AccountSuspendedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.sesv2#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.sesv2#MailFromDomainNotVerifiedException":
            throw await deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.sesv2#MessageRejected":
            throw await deserializeAws_restJson1MessageRejectedResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "SendingPausedException":
        case "com.amazonaws.sesv2#SendingPausedException":
            throw await deserializeAws_restJson1SendingPausedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TestRenderEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1TestRenderEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.RenderedTemplate != null) {
        contents.RenderedTemplate = (0, smithy_client_1.expectString)(data.RenderedTemplate);
    }
    return contents;
};
exports.deserializeAws_restJson1TestRenderEmailTemplateCommand = deserializeAws_restJson1TestRenderEmailTemplateCommand;
const deserializeAws_restJson1TestRenderEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommand = deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommand;
const deserializeAws_restJson1UpdateConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateContactCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateContactCommand = deserializeAws_restJson1UpdateContactCommand;
const deserializeAws_restJson1UpdateContactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateContactListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateContactListCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateContactListCommand = deserializeAws_restJson1UpdateContactListCommand;
const deserializeAws_restJson1UpdateContactListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.sesv2#ConcurrentModificationException":
            throw await deserializeAws_restJson1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand = deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommand;
const deserializeAws_restJson1UpdateCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEmailIdentityPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEmailIdentityPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEmailIdentityPolicyCommand = deserializeAws_restJson1UpdateEmailIdentityPolicyCommand;
const deserializeAws_restJson1UpdateEmailIdentityPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEmailTemplateCommand = deserializeAws_restJson1UpdateEmailTemplateCommand;
const deserializeAws_restJson1UpdateEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.sesv2#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.sesv2#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sesv2#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: SESv2ServiceException_1.SESv2ServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1AccountSuspendedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.AccountSuspendedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1AlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ConcurrentModificationExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidNextTokenExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1MailFromDomainNotVerifiedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.MailFromDomainNotVerifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1MessageRejectedResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.MessageRejected({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1SendingPausedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.SendingPausedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1AdditionalContactEmailAddresses = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1Body = (input, context) => {
    return {
        ...(input.Html != null && { Html: serializeAws_restJson1Content(input.Html, context) }),
        ...(input.Text != null && { Text: serializeAws_restJson1Content(input.Text, context) }),
    };
};
const serializeAws_restJson1BulkEmailContent = (input, context) => {
    return {
        ...(input.Template != null && { Template: serializeAws_restJson1Template(input.Template, context) }),
    };
};
const serializeAws_restJson1BulkEmailEntry = (input, context) => {
    return {
        ...(input.Destination != null && { Destination: serializeAws_restJson1Destination(input.Destination, context) }),
        ...(input.ReplacementEmailContent != null && {
            ReplacementEmailContent: serializeAws_restJson1ReplacementEmailContent(input.ReplacementEmailContent, context),
        }),
        ...(input.ReplacementTags != null && {
            ReplacementTags: serializeAws_restJson1MessageTagList(input.ReplacementTags, context),
        }),
    };
};
const serializeAws_restJson1BulkEmailEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1BulkEmailEntry(entry, context);
    });
};
const serializeAws_restJson1CloudWatchDestination = (input, context) => {
    return {
        ...(input.DimensionConfigurations != null && {
            DimensionConfigurations: serializeAws_restJson1CloudWatchDimensionConfigurations(input.DimensionConfigurations, context),
        }),
    };
};
const serializeAws_restJson1CloudWatchDimensionConfiguration = (input, context) => {
    return {
        ...(input.DefaultDimensionValue != null && { DefaultDimensionValue: input.DefaultDimensionValue }),
        ...(input.DimensionName != null && { DimensionName: input.DimensionName }),
        ...(input.DimensionValueSource != null && { DimensionValueSource: input.DimensionValueSource }),
    };
};
const serializeAws_restJson1CloudWatchDimensionConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1CloudWatchDimensionConfiguration(entry, context);
    });
};
const serializeAws_restJson1ContactListDestination = (input, context) => {
    return {
        ...(input.ContactListImportAction != null && { ContactListImportAction: input.ContactListImportAction }),
        ...(input.ContactListName != null && { ContactListName: input.ContactListName }),
    };
};
const serializeAws_restJson1Content = (input, context) => {
    return {
        ...(input.Charset != null && { Charset: input.Charset }),
        ...(input.Data != null && { Data: input.Data }),
    };
};
const serializeAws_restJson1DeliveryOptions = (input, context) => {
    return {
        ...(input.SendingPoolName != null && { SendingPoolName: input.SendingPoolName }),
        ...(input.TlsPolicy != null && { TlsPolicy: input.TlsPolicy }),
    };
};
const serializeAws_restJson1Destination = (input, context) => {
    return {
        ...(input.BccAddresses != null && {
            BccAddresses: serializeAws_restJson1EmailAddressList(input.BccAddresses, context),
        }),
        ...(input.CcAddresses != null && {
            CcAddresses: serializeAws_restJson1EmailAddressList(input.CcAddresses, context),
        }),
        ...(input.ToAddresses != null && {
            ToAddresses: serializeAws_restJson1EmailAddressList(input.ToAddresses, context),
        }),
    };
};
const serializeAws_restJson1DkimSigningAttributes = (input, context) => {
    return {
        ...(input.DomainSigningPrivateKey != null && { DomainSigningPrivateKey: input.DomainSigningPrivateKey }),
        ...(input.DomainSigningSelector != null && { DomainSigningSelector: input.DomainSigningSelector }),
        ...(input.NextSigningKeyLength != null && { NextSigningKeyLength: input.NextSigningKeyLength }),
    };
};
const serializeAws_restJson1DomainDeliverabilityTrackingOption = (input, context) => {
    return {
        ...(input.Domain != null && { Domain: input.Domain }),
        ...(input.InboxPlacementTrackingOption != null && {
            InboxPlacementTrackingOption: serializeAws_restJson1InboxPlacementTrackingOption(input.InboxPlacementTrackingOption, context),
        }),
        ...(input.SubscriptionStartDate != null && {
            SubscriptionStartDate: Math.round(input.SubscriptionStartDate.getTime() / 1000),
        }),
    };
};
const serializeAws_restJson1DomainDeliverabilityTrackingOptions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1DomainDeliverabilityTrackingOption(entry, context);
    });
};
const serializeAws_restJson1EmailAddressList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1EmailContent = (input, context) => {
    return {
        ...(input.Raw != null && { Raw: serializeAws_restJson1RawMessage(input.Raw, context) }),
        ...(input.Simple != null && { Simple: serializeAws_restJson1Message(input.Simple, context) }),
        ...(input.Template != null && { Template: serializeAws_restJson1Template(input.Template, context) }),
    };
};
const serializeAws_restJson1EmailTemplateContent = (input, context) => {
    return {
        ...(input.Html != null && { Html: input.Html }),
        ...(input.Subject != null && { Subject: input.Subject }),
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_restJson1EventDestinationDefinition = (input, context) => {
    return {
        ...(input.CloudWatchDestination != null && {
            CloudWatchDestination: serializeAws_restJson1CloudWatchDestination(input.CloudWatchDestination, context),
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.KinesisFirehoseDestination != null && {
            KinesisFirehoseDestination: serializeAws_restJson1KinesisFirehoseDestination(input.KinesisFirehoseDestination, context),
        }),
        ...(input.MatchingEventTypes != null && {
            MatchingEventTypes: serializeAws_restJson1EventTypes(input.MatchingEventTypes, context),
        }),
        ...(input.PinpointDestination != null && {
            PinpointDestination: serializeAws_restJson1PinpointDestination(input.PinpointDestination, context),
        }),
        ...(input.SnsDestination != null && {
            SnsDestination: serializeAws_restJson1SnsDestination(input.SnsDestination, context),
        }),
    };
};
const serializeAws_restJson1EventTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ImportDataSource = (input, context) => {
    return {
        ...(input.DataFormat != null && { DataFormat: input.DataFormat }),
        ...(input.S3Url != null && { S3Url: input.S3Url }),
    };
};
const serializeAws_restJson1ImportDestination = (input, context) => {
    return {
        ...(input.ContactListDestination != null && {
            ContactListDestination: serializeAws_restJson1ContactListDestination(input.ContactListDestination, context),
        }),
        ...(input.SuppressionListDestination != null && {
            SuppressionListDestination: serializeAws_restJson1SuppressionListDestination(input.SuppressionListDestination, context),
        }),
    };
};
const serializeAws_restJson1InboxPlacementTrackingOption = (input, context) => {
    return {
        ...(input.Global != null && { Global: input.Global }),
        ...(input.TrackedIsps != null && { TrackedIsps: serializeAws_restJson1IspNameList(input.TrackedIsps, context) }),
    };
};
const serializeAws_restJson1IspNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1KinesisFirehoseDestination = (input, context) => {
    return {
        ...(input.DeliveryStreamArn != null && { DeliveryStreamArn: input.DeliveryStreamArn }),
        ...(input.IamRoleArn != null && { IamRoleArn: input.IamRoleArn }),
    };
};
const serializeAws_restJson1ListContactsFilter = (input, context) => {
    return {
        ...(input.FilteredStatus != null && { FilteredStatus: input.FilteredStatus }),
        ...(input.TopicFilter != null && { TopicFilter: serializeAws_restJson1TopicFilter(input.TopicFilter, context) }),
    };
};
const serializeAws_restJson1ListManagementOptions = (input, context) => {
    return {
        ...(input.ContactListName != null && { ContactListName: input.ContactListName }),
        ...(input.TopicName != null && { TopicName: input.TopicName }),
    };
};
const serializeAws_restJson1Message = (input, context) => {
    return {
        ...(input.Body != null && { Body: serializeAws_restJson1Body(input.Body, context) }),
        ...(input.Subject != null && { Subject: serializeAws_restJson1Content(input.Subject, context) }),
    };
};
const serializeAws_restJson1MessageTag = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_restJson1MessageTagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1MessageTag(entry, context);
    });
};
const serializeAws_restJson1PinpointDestination = (input, context) => {
    return {
        ...(input.ApplicationArn != null && { ApplicationArn: input.ApplicationArn }),
    };
};
const serializeAws_restJson1RawMessage = (input, context) => {
    return {
        ...(input.Data != null && { Data: context.base64Encoder(input.Data) }),
    };
};
const serializeAws_restJson1ReplacementEmailContent = (input, context) => {
    return {
        ...(input.ReplacementTemplate != null && {
            ReplacementTemplate: serializeAws_restJson1ReplacementTemplate(input.ReplacementTemplate, context),
        }),
    };
};
const serializeAws_restJson1ReplacementTemplate = (input, context) => {
    return {
        ...(input.ReplacementTemplateData != null && { ReplacementTemplateData: input.ReplacementTemplateData }),
    };
};
const serializeAws_restJson1ReputationOptions = (input, context) => {
    return {
        ...(input.LastFreshStart != null && { LastFreshStart: Math.round(input.LastFreshStart.getTime() / 1000) }),
        ...(input.ReputationMetricsEnabled != null && { ReputationMetricsEnabled: input.ReputationMetricsEnabled }),
    };
};
const serializeAws_restJson1SendingOptions = (input, context) => {
    return {
        ...(input.SendingEnabled != null && { SendingEnabled: input.SendingEnabled }),
    };
};
const serializeAws_restJson1SnsDestination = (input, context) => {
    return {
        ...(input.TopicArn != null && { TopicArn: input.TopicArn }),
    };
};
const serializeAws_restJson1SuppressionListDestination = (input, context) => {
    return {
        ...(input.SuppressionListImportAction != null && {
            SuppressionListImportAction: input.SuppressionListImportAction,
        }),
    };
};
const serializeAws_restJson1SuppressionListReasons = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1SuppressionOptions = (input, context) => {
    return {
        ...(input.SuppressedReasons != null && {
            SuppressedReasons: serializeAws_restJson1SuppressionListReasons(input.SuppressedReasons, context),
        }),
    };
};
const serializeAws_restJson1Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_restJson1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1Tag(entry, context);
    });
};
const serializeAws_restJson1Template = (input, context) => {
    return {
        ...(input.TemplateArn != null && { TemplateArn: input.TemplateArn }),
        ...(input.TemplateData != null && { TemplateData: input.TemplateData }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
    };
};
const serializeAws_restJson1Topic = (input, context) => {
    return {
        ...(input.DefaultSubscriptionStatus != null && { DefaultSubscriptionStatus: input.DefaultSubscriptionStatus }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.DisplayName != null && { DisplayName: input.DisplayName }),
        ...(input.TopicName != null && { TopicName: input.TopicName }),
    };
};
const serializeAws_restJson1TopicFilter = (input, context) => {
    return {
        ...(input.TopicName != null && { TopicName: input.TopicName }),
        ...(input.UseDefaultIfPreferenceUnavailable != null && {
            UseDefaultIfPreferenceUnavailable: input.UseDefaultIfPreferenceUnavailable,
        }),
    };
};
const serializeAws_restJson1TopicPreference = (input, context) => {
    return {
        ...(input.SubscriptionStatus != null && { SubscriptionStatus: input.SubscriptionStatus }),
        ...(input.TopicName != null && { TopicName: input.TopicName }),
    };
};
const serializeAws_restJson1TopicPreferenceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1TopicPreference(entry, context);
    });
};
const serializeAws_restJson1Topics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1Topic(entry, context);
    });
};
const serializeAws_restJson1TrackingOptions = (input, context) => {
    return {
        ...(input.CustomRedirectDomain != null && { CustomRedirectDomain: input.CustomRedirectDomain }),
    };
};
const deserializeAws_restJson1AccountDetails = (output, context) => {
    return {
        AdditionalContactEmailAddresses: output.AdditionalContactEmailAddresses != null
            ? deserializeAws_restJson1AdditionalContactEmailAddresses(output.AdditionalContactEmailAddresses, context)
            : undefined,
        ContactLanguage: (0, smithy_client_1.expectString)(output.ContactLanguage),
        MailType: (0, smithy_client_1.expectString)(output.MailType),
        ReviewDetails: output.ReviewDetails != null ? deserializeAws_restJson1ReviewDetails(output.ReviewDetails, context) : undefined,
        UseCaseDescription: (0, smithy_client_1.expectString)(output.UseCaseDescription),
        WebsiteURL: (0, smithy_client_1.expectString)(output.WebsiteURL),
    };
};
const deserializeAws_restJson1AdditionalContactEmailAddresses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1BlacklistEntries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BlacklistEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1BlacklistEntry = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        ListingTime: output.ListingTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ListingTime)))
            : undefined,
        RblName: (0, smithy_client_1.expectString)(output.RblName),
    };
};
const deserializeAws_restJson1BlacklistReport = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1BlacklistEntries(value, context),
        };
    }, {});
};
const deserializeAws_restJson1BulkEmailEntryResult = (output, context) => {
    return {
        Error: (0, smithy_client_1.expectString)(output.Error),
        MessageId: (0, smithy_client_1.expectString)(output.MessageId),
        Status: (0, smithy_client_1.expectString)(output.Status),
    };
};
const deserializeAws_restJson1BulkEmailEntryResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BulkEmailEntryResult(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1CloudWatchDestination = (output, context) => {
    return {
        DimensionConfigurations: output.DimensionConfigurations != null
            ? deserializeAws_restJson1CloudWatchDimensionConfigurations(output.DimensionConfigurations, context)
            : undefined,
    };
};
const deserializeAws_restJson1CloudWatchDimensionConfiguration = (output, context) => {
    return {
        DefaultDimensionValue: (0, smithy_client_1.expectString)(output.DefaultDimensionValue),
        DimensionName: (0, smithy_client_1.expectString)(output.DimensionName),
        DimensionValueSource: (0, smithy_client_1.expectString)(output.DimensionValueSource),
    };
};
const deserializeAws_restJson1CloudWatchDimensionConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CloudWatchDimensionConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ConfigurationSetNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Contact = (output, context) => {
    return {
        EmailAddress: (0, smithy_client_1.expectString)(output.EmailAddress),
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTimestamp)))
            : undefined,
        TopicDefaultPreferences: output.TopicDefaultPreferences != null
            ? deserializeAws_restJson1TopicPreferenceList(output.TopicDefaultPreferences, context)
            : undefined,
        TopicPreferences: output.TopicPreferences != null
            ? deserializeAws_restJson1TopicPreferenceList(output.TopicPreferences, context)
            : undefined,
        UnsubscribeAll: (0, smithy_client_1.expectBoolean)(output.UnsubscribeAll),
    };
};
const deserializeAws_restJson1ContactList = (output, context) => {
    return {
        ContactListName: (0, smithy_client_1.expectString)(output.ContactListName),
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTimestamp)))
            : undefined,
    };
};
const deserializeAws_restJson1ContactListDestination = (output, context) => {
    return {
        ContactListImportAction: (0, smithy_client_1.expectString)(output.ContactListImportAction),
        ContactListName: (0, smithy_client_1.expectString)(output.ContactListName),
    };
};
const deserializeAws_restJson1CustomVerificationEmailTemplateMetadata = (output, context) => {
    return {
        FailureRedirectionURL: (0, smithy_client_1.expectString)(output.FailureRedirectionURL),
        FromEmailAddress: (0, smithy_client_1.expectString)(output.FromEmailAddress),
        SuccessRedirectionURL: (0, smithy_client_1.expectString)(output.SuccessRedirectionURL),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateSubject: (0, smithy_client_1.expectString)(output.TemplateSubject),
    };
};
const deserializeAws_restJson1CustomVerificationEmailTemplatesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CustomVerificationEmailTemplateMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DailyVolume = (output, context) => {
    return {
        DomainIspPlacements: output.DomainIspPlacements != null
            ? deserializeAws_restJson1DomainIspPlacements(output.DomainIspPlacements, context)
            : undefined,
        StartDate: output.StartDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartDate))) : undefined,
        VolumeStatistics: output.VolumeStatistics != null
            ? deserializeAws_restJson1VolumeStatistics(output.VolumeStatistics, context)
            : undefined,
    };
};
const deserializeAws_restJson1DailyVolumes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DailyVolume(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DedicatedIp = (output, context) => {
    return {
        Ip: (0, smithy_client_1.expectString)(output.Ip),
        PoolName: (0, smithy_client_1.expectString)(output.PoolName),
        WarmupPercentage: (0, smithy_client_1.expectInt32)(output.WarmupPercentage),
        WarmupStatus: (0, smithy_client_1.expectString)(output.WarmupStatus),
    };
};
const deserializeAws_restJson1DedicatedIpList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DedicatedIp(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DeliverabilityTestReport = (output, context) => {
    return {
        CreateDate: output.CreateDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreateDate))) : undefined,
        DeliverabilityTestStatus: (0, smithy_client_1.expectString)(output.DeliverabilityTestStatus),
        FromEmailAddress: (0, smithy_client_1.expectString)(output.FromEmailAddress),
        ReportId: (0, smithy_client_1.expectString)(output.ReportId),
        ReportName: (0, smithy_client_1.expectString)(output.ReportName),
        Subject: (0, smithy_client_1.expectString)(output.Subject),
    };
};
const deserializeAws_restJson1DeliverabilityTestReports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DeliverabilityTestReport(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DeliveryOptions = (output, context) => {
    return {
        SendingPoolName: (0, smithy_client_1.expectString)(output.SendingPoolName),
        TlsPolicy: (0, smithy_client_1.expectString)(output.TlsPolicy),
    };
};
const deserializeAws_restJson1DkimAttributes = (output, context) => {
    return {
        CurrentSigningKeyLength: (0, smithy_client_1.expectString)(output.CurrentSigningKeyLength),
        LastKeyGenerationTimestamp: output.LastKeyGenerationTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastKeyGenerationTimestamp)))
            : undefined,
        NextSigningKeyLength: (0, smithy_client_1.expectString)(output.NextSigningKeyLength),
        SigningAttributesOrigin: (0, smithy_client_1.expectString)(output.SigningAttributesOrigin),
        SigningEnabled: (0, smithy_client_1.expectBoolean)(output.SigningEnabled),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Tokens: output.Tokens != null ? deserializeAws_restJson1DnsTokenList(output.Tokens, context) : undefined,
    };
};
const deserializeAws_restJson1DnsTokenList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1DomainDeliverabilityCampaign = (output, context) => {
    return {
        CampaignId: (0, smithy_client_1.expectString)(output.CampaignId),
        DeleteRate: (0, smithy_client_1.limitedParseDouble)(output.DeleteRate),
        Esps: output.Esps != null ? deserializeAws_restJson1Esps(output.Esps, context) : undefined,
        FirstSeenDateTime: output.FirstSeenDateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.FirstSeenDateTime)))
            : undefined,
        FromAddress: (0, smithy_client_1.expectString)(output.FromAddress),
        ImageUrl: (0, smithy_client_1.expectString)(output.ImageUrl),
        InboxCount: (0, smithy_client_1.expectLong)(output.InboxCount),
        LastSeenDateTime: output.LastSeenDateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSeenDateTime)))
            : undefined,
        ProjectedVolume: (0, smithy_client_1.expectLong)(output.ProjectedVolume),
        ReadDeleteRate: (0, smithy_client_1.limitedParseDouble)(output.ReadDeleteRate),
        ReadRate: (0, smithy_client_1.limitedParseDouble)(output.ReadRate),
        SendingIps: output.SendingIps != null ? deserializeAws_restJson1IpList(output.SendingIps, context) : undefined,
        SpamCount: (0, smithy_client_1.expectLong)(output.SpamCount),
        Subject: (0, smithy_client_1.expectString)(output.Subject),
    };
};
const deserializeAws_restJson1DomainDeliverabilityCampaignList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainDeliverabilityCampaign(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DomainDeliverabilityTrackingOption = (output, context) => {
    return {
        Domain: (0, smithy_client_1.expectString)(output.Domain),
        InboxPlacementTrackingOption: output.InboxPlacementTrackingOption != null
            ? deserializeAws_restJson1InboxPlacementTrackingOption(output.InboxPlacementTrackingOption, context)
            : undefined,
        SubscriptionStartDate: output.SubscriptionStartDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SubscriptionStartDate)))
            : undefined,
    };
};
const deserializeAws_restJson1DomainDeliverabilityTrackingOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainDeliverabilityTrackingOption(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1DomainIspPlacement = (output, context) => {
    return {
        InboxPercentage: (0, smithy_client_1.limitedParseDouble)(output.InboxPercentage),
        InboxRawCount: (0, smithy_client_1.expectLong)(output.InboxRawCount),
        IspName: (0, smithy_client_1.expectString)(output.IspName),
        SpamPercentage: (0, smithy_client_1.limitedParseDouble)(output.SpamPercentage),
        SpamRawCount: (0, smithy_client_1.expectLong)(output.SpamRawCount),
    };
};
const deserializeAws_restJson1DomainIspPlacements = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainIspPlacement(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1EmailTemplateContent = (output, context) => {
    return {
        Html: (0, smithy_client_1.expectString)(output.Html),
        Subject: (0, smithy_client_1.expectString)(output.Subject),
        Text: (0, smithy_client_1.expectString)(output.Text),
    };
};
const deserializeAws_restJson1EmailTemplateMetadata = (output, context) => {
    return {
        CreatedTimestamp: output.CreatedTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTimestamp)))
            : undefined,
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
    };
};
const deserializeAws_restJson1EmailTemplateMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EmailTemplateMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1Esps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1EventDestination = (output, context) => {
    return {
        CloudWatchDestination: output.CloudWatchDestination != null
            ? deserializeAws_restJson1CloudWatchDestination(output.CloudWatchDestination, context)
            : undefined,
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        KinesisFirehoseDestination: output.KinesisFirehoseDestination != null
            ? deserializeAws_restJson1KinesisFirehoseDestination(output.KinesisFirehoseDestination, context)
            : undefined,
        MatchingEventTypes: output.MatchingEventTypes != null
            ? deserializeAws_restJson1EventTypes(output.MatchingEventTypes, context)
            : undefined,
        Name: (0, smithy_client_1.expectString)(output.Name),
        PinpointDestination: output.PinpointDestination != null
            ? deserializeAws_restJson1PinpointDestination(output.PinpointDestination, context)
            : undefined,
        SnsDestination: output.SnsDestination != null
            ? deserializeAws_restJson1SnsDestination(output.SnsDestination, context)
            : undefined,
    };
};
const deserializeAws_restJson1EventDestinations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EventDestination(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1EventTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1FailureInfo = (output, context) => {
    return {
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        FailedRecordsS3Url: (0, smithy_client_1.expectString)(output.FailedRecordsS3Url),
    };
};
const deserializeAws_restJson1IdentityInfo = (output, context) => {
    return {
        IdentityName: (0, smithy_client_1.expectString)(output.IdentityName),
        IdentityType: (0, smithy_client_1.expectString)(output.IdentityType),
        SendingEnabled: (0, smithy_client_1.expectBoolean)(output.SendingEnabled),
    };
};
const deserializeAws_restJson1IdentityInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1IdentityInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ImportDataSource = (output, context) => {
    return {
        DataFormat: (0, smithy_client_1.expectString)(output.DataFormat),
        S3Url: (0, smithy_client_1.expectString)(output.S3Url),
    };
};
const deserializeAws_restJson1ImportDestination = (output, context) => {
    return {
        ContactListDestination: output.ContactListDestination != null
            ? deserializeAws_restJson1ContactListDestination(output.ContactListDestination, context)
            : undefined,
        SuppressionListDestination: output.SuppressionListDestination != null
            ? deserializeAws_restJson1SuppressionListDestination(output.SuppressionListDestination, context)
            : undefined,
    };
};
const deserializeAws_restJson1ImportJobSummary = (output, context) => {
    return {
        CreatedTimestamp: output.CreatedTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTimestamp)))
            : undefined,
        ImportDestination: output.ImportDestination != null
            ? deserializeAws_restJson1ImportDestination(output.ImportDestination, context)
            : undefined,
        JobId: (0, smithy_client_1.expectString)(output.JobId),
        JobStatus: (0, smithy_client_1.expectString)(output.JobStatus),
    };
};
const deserializeAws_restJson1ImportJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ImportJobSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1InboxPlacementTrackingOption = (output, context) => {
    return {
        Global: (0, smithy_client_1.expectBoolean)(output.Global),
        TrackedIsps: output.TrackedIsps != null ? deserializeAws_restJson1IspNameList(output.TrackedIsps, context) : undefined,
    };
};
const deserializeAws_restJson1IpList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1IspNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1IspPlacement = (output, context) => {
    return {
        IspName: (0, smithy_client_1.expectString)(output.IspName),
        PlacementStatistics: output.PlacementStatistics != null
            ? deserializeAws_restJson1PlacementStatistics(output.PlacementStatistics, context)
            : undefined,
    };
};
const deserializeAws_restJson1IspPlacements = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1IspPlacement(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1KinesisFirehoseDestination = (output, context) => {
    return {
        DeliveryStreamArn: (0, smithy_client_1.expectString)(output.DeliveryStreamArn),
        IamRoleArn: (0, smithy_client_1.expectString)(output.IamRoleArn),
    };
};
const deserializeAws_restJson1ListOfContactLists = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ContactList(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfContacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Contact(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDedicatedIpPools = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1MailFromAttributes = (output, context) => {
    return {
        BehaviorOnMxFailure: (0, smithy_client_1.expectString)(output.BehaviorOnMxFailure),
        MailFromDomain: (0, smithy_client_1.expectString)(output.MailFromDomain),
        MailFromDomainStatus: (0, smithy_client_1.expectString)(output.MailFromDomainStatus),
    };
};
const deserializeAws_restJson1OverallVolume = (output, context) => {
    return {
        DomainIspPlacements: output.DomainIspPlacements != null
            ? deserializeAws_restJson1DomainIspPlacements(output.DomainIspPlacements, context)
            : undefined,
        ReadRatePercent: (0, smithy_client_1.limitedParseDouble)(output.ReadRatePercent),
        VolumeStatistics: output.VolumeStatistics != null
            ? deserializeAws_restJson1VolumeStatistics(output.VolumeStatistics, context)
            : undefined,
    };
};
const deserializeAws_restJson1PinpointDestination = (output, context) => {
    return {
        ApplicationArn: (0, smithy_client_1.expectString)(output.ApplicationArn),
    };
};
const deserializeAws_restJson1PlacementStatistics = (output, context) => {
    return {
        DkimPercentage: (0, smithy_client_1.limitedParseDouble)(output.DkimPercentage),
        InboxPercentage: (0, smithy_client_1.limitedParseDouble)(output.InboxPercentage),
        MissingPercentage: (0, smithy_client_1.limitedParseDouble)(output.MissingPercentage),
        SpamPercentage: (0, smithy_client_1.limitedParseDouble)(output.SpamPercentage),
        SpfPercentage: (0, smithy_client_1.limitedParseDouble)(output.SpfPercentage),
    };
};
const deserializeAws_restJson1PolicyMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectString)(value),
        };
    }, {});
};
const deserializeAws_restJson1ReputationOptions = (output, context) => {
    return {
        LastFreshStart: output.LastFreshStart != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastFreshStart)))
            : undefined,
        ReputationMetricsEnabled: (0, smithy_client_1.expectBoolean)(output.ReputationMetricsEnabled),
    };
};
const deserializeAws_restJson1ReviewDetails = (output, context) => {
    return {
        CaseId: (0, smithy_client_1.expectString)(output.CaseId),
        Status: (0, smithy_client_1.expectString)(output.Status),
    };
};
const deserializeAws_restJson1SendingOptions = (output, context) => {
    return {
        SendingEnabled: (0, smithy_client_1.expectBoolean)(output.SendingEnabled),
    };
};
const deserializeAws_restJson1SendQuota = (output, context) => {
    return {
        Max24HourSend: (0, smithy_client_1.limitedParseDouble)(output.Max24HourSend),
        MaxSendRate: (0, smithy_client_1.limitedParseDouble)(output.MaxSendRate),
        SentLast24Hours: (0, smithy_client_1.limitedParseDouble)(output.SentLast24Hours),
    };
};
const deserializeAws_restJson1SnsDestination = (output, context) => {
    return {
        TopicArn: (0, smithy_client_1.expectString)(output.TopicArn),
    };
};
const deserializeAws_restJson1SuppressedDestination = (output, context) => {
    return {
        Attributes: output.Attributes != null
            ? deserializeAws_restJson1SuppressedDestinationAttributes(output.Attributes, context)
            : undefined,
        EmailAddress: (0, smithy_client_1.expectString)(output.EmailAddress),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        Reason: (0, smithy_client_1.expectString)(output.Reason),
    };
};
const deserializeAws_restJson1SuppressedDestinationAttributes = (output, context) => {
    return {
        FeedbackId: (0, smithy_client_1.expectString)(output.FeedbackId),
        MessageId: (0, smithy_client_1.expectString)(output.MessageId),
    };
};
const deserializeAws_restJson1SuppressedDestinationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SuppressedDestinationSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1SuppressedDestinationSummary = (output, context) => {
    return {
        EmailAddress: (0, smithy_client_1.expectString)(output.EmailAddress),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        Reason: (0, smithy_client_1.expectString)(output.Reason),
    };
};
const deserializeAws_restJson1SuppressionAttributes = (output, context) => {
    return {
        SuppressedReasons: output.SuppressedReasons != null
            ? deserializeAws_restJson1SuppressionListReasons(output.SuppressedReasons, context)
            : undefined,
    };
};
const deserializeAws_restJson1SuppressionListDestination = (output, context) => {
    return {
        SuppressionListImportAction: (0, smithy_client_1.expectString)(output.SuppressionListImportAction),
    };
};
const deserializeAws_restJson1SuppressionListReasons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1SuppressionOptions = (output, context) => {
    return {
        SuppressedReasons: output.SuppressedReasons != null
            ? deserializeAws_restJson1SuppressionListReasons(output.SuppressedReasons, context)
            : undefined,
    };
};
const deserializeAws_restJson1Tag = (output, context) => {
    return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const deserializeAws_restJson1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1Topic = (output, context) => {
    return {
        DefaultSubscriptionStatus: (0, smithy_client_1.expectString)(output.DefaultSubscriptionStatus),
        Description: (0, smithy_client_1.expectString)(output.Description),
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        TopicName: (0, smithy_client_1.expectString)(output.TopicName),
    };
};
const deserializeAws_restJson1TopicPreference = (output, context) => {
    return {
        SubscriptionStatus: (0, smithy_client_1.expectString)(output.SubscriptionStatus),
        TopicName: (0, smithy_client_1.expectString)(output.TopicName),
    };
};
const deserializeAws_restJson1TopicPreferenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1TopicPreference(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1Topics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Topic(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1TrackingOptions = (output, context) => {
    return {
        CustomRedirectDomain: (0, smithy_client_1.expectString)(output.CustomRedirectDomain),
    };
};
const deserializeAws_restJson1VolumeStatistics = (output, context) => {
    return {
        InboxRawCount: (0, smithy_client_1.expectLong)(output.InboxRawCount),
        ProjectedInbox: (0, smithy_client_1.expectLong)(output.ProjectedInbox),
        ProjectedSpam: (0, smithy_client_1.expectLong)(output.ProjectedSpam),
        SpamRawCount: (0, smithy_client_1.expectLong)(output.SpamRawCount),
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
