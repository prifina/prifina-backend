"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1GetDataCatalogCommand = exports.deserializeAws_json1_1GetDatabaseCommand = exports.deserializeAws_json1_1DeleteWorkGroupCommand = exports.deserializeAws_json1_1DeletePreparedStatementCommand = exports.deserializeAws_json1_1DeleteNamedQueryCommand = exports.deserializeAws_json1_1DeleteDataCatalogCommand = exports.deserializeAws_json1_1CreateWorkGroupCommand = exports.deserializeAws_json1_1CreatePreparedStatementCommand = exports.deserializeAws_json1_1CreateNamedQueryCommand = exports.deserializeAws_json1_1CreateDataCatalogCommand = exports.deserializeAws_json1_1BatchGetQueryExecutionCommand = exports.deserializeAws_json1_1BatchGetPreparedStatementCommand = exports.deserializeAws_json1_1BatchGetNamedQueryCommand = exports.serializeAws_json1_1UpdateWorkGroupCommand = exports.serializeAws_json1_1UpdatePreparedStatementCommand = exports.serializeAws_json1_1UpdateNamedQueryCommand = exports.serializeAws_json1_1UpdateDataCatalogCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1StopQueryExecutionCommand = exports.serializeAws_json1_1StartQueryExecutionCommand = exports.serializeAws_json1_1ListWorkGroupsCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = exports.serializeAws_json1_1ListTableMetadataCommand = exports.serializeAws_json1_1ListQueryExecutionsCommand = exports.serializeAws_json1_1ListPreparedStatementsCommand = exports.serializeAws_json1_1ListNamedQueriesCommand = exports.serializeAws_json1_1ListEngineVersionsCommand = exports.serializeAws_json1_1ListDataCatalogsCommand = exports.serializeAws_json1_1ListDatabasesCommand = exports.serializeAws_json1_1GetWorkGroupCommand = exports.serializeAws_json1_1GetTableMetadataCommand = exports.serializeAws_json1_1GetQueryRuntimeStatisticsCommand = exports.serializeAws_json1_1GetQueryResultsCommand = exports.serializeAws_json1_1GetQueryExecutionCommand = exports.serializeAws_json1_1GetPreparedStatementCommand = exports.serializeAws_json1_1GetNamedQueryCommand = exports.serializeAws_json1_1GetDataCatalogCommand = exports.serializeAws_json1_1GetDatabaseCommand = exports.serializeAws_json1_1DeleteWorkGroupCommand = exports.serializeAws_json1_1DeletePreparedStatementCommand = exports.serializeAws_json1_1DeleteNamedQueryCommand = exports.serializeAws_json1_1DeleteDataCatalogCommand = exports.serializeAws_json1_1CreateWorkGroupCommand = exports.serializeAws_json1_1CreatePreparedStatementCommand = exports.serializeAws_json1_1CreateNamedQueryCommand = exports.serializeAws_json1_1CreateDataCatalogCommand = exports.serializeAws_json1_1BatchGetQueryExecutionCommand = exports.serializeAws_json1_1BatchGetPreparedStatementCommand = exports.serializeAws_json1_1BatchGetNamedQueryCommand = void 0;
exports.deserializeAws_json1_1UpdateWorkGroupCommand = exports.deserializeAws_json1_1UpdatePreparedStatementCommand = exports.deserializeAws_json1_1UpdateNamedQueryCommand = exports.deserializeAws_json1_1UpdateDataCatalogCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1StopQueryExecutionCommand = exports.deserializeAws_json1_1StartQueryExecutionCommand = exports.deserializeAws_json1_1ListWorkGroupsCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListTableMetadataCommand = exports.deserializeAws_json1_1ListQueryExecutionsCommand = exports.deserializeAws_json1_1ListPreparedStatementsCommand = exports.deserializeAws_json1_1ListNamedQueriesCommand = exports.deserializeAws_json1_1ListEngineVersionsCommand = exports.deserializeAws_json1_1ListDataCatalogsCommand = exports.deserializeAws_json1_1ListDatabasesCommand = exports.deserializeAws_json1_1GetWorkGroupCommand = exports.deserializeAws_json1_1GetTableMetadataCommand = exports.deserializeAws_json1_1GetQueryRuntimeStatisticsCommand = exports.deserializeAws_json1_1GetQueryResultsCommand = exports.deserializeAws_json1_1GetQueryExecutionCommand = exports.deserializeAws_json1_1GetPreparedStatementCommand = exports.deserializeAws_json1_1GetNamedQueryCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const uuid_1 = require("uuid");
const AthenaServiceException_1 = require("../models/AthenaServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_json1_1BatchGetNamedQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.BatchGetNamedQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetNamedQueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchGetNamedQueryCommand = serializeAws_json1_1BatchGetNamedQueryCommand;
const serializeAws_json1_1BatchGetPreparedStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.BatchGetPreparedStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetPreparedStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchGetPreparedStatementCommand = serializeAws_json1_1BatchGetPreparedStatementCommand;
const serializeAws_json1_1BatchGetQueryExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.BatchGetQueryExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetQueryExecutionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchGetQueryExecutionCommand = serializeAws_json1_1BatchGetQueryExecutionCommand;
const serializeAws_json1_1CreateDataCatalogCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.CreateDataCatalog",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDataCatalogInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateDataCatalogCommand = serializeAws_json1_1CreateDataCatalogCommand;
const serializeAws_json1_1CreateNamedQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.CreateNamedQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNamedQueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateNamedQueryCommand = serializeAws_json1_1CreateNamedQueryCommand;
const serializeAws_json1_1CreatePreparedStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.CreatePreparedStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreatePreparedStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreatePreparedStatementCommand = serializeAws_json1_1CreatePreparedStatementCommand;
const serializeAws_json1_1CreateWorkGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.CreateWorkGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateWorkGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateWorkGroupCommand = serializeAws_json1_1CreateWorkGroupCommand;
const serializeAws_json1_1DeleteDataCatalogCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.DeleteDataCatalog",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDataCatalogInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteDataCatalogCommand = serializeAws_json1_1DeleteDataCatalogCommand;
const serializeAws_json1_1DeleteNamedQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.DeleteNamedQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNamedQueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteNamedQueryCommand = serializeAws_json1_1DeleteNamedQueryCommand;
const serializeAws_json1_1DeletePreparedStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.DeletePreparedStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeletePreparedStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeletePreparedStatementCommand = serializeAws_json1_1DeletePreparedStatementCommand;
const serializeAws_json1_1DeleteWorkGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.DeleteWorkGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteWorkGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteWorkGroupCommand = serializeAws_json1_1DeleteWorkGroupCommand;
const serializeAws_json1_1GetDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetDatabase",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDatabaseInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetDatabaseCommand = serializeAws_json1_1GetDatabaseCommand;
const serializeAws_json1_1GetDataCatalogCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetDataCatalog",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDataCatalogInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetDataCatalogCommand = serializeAws_json1_1GetDataCatalogCommand;
const serializeAws_json1_1GetNamedQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetNamedQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetNamedQueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetNamedQueryCommand = serializeAws_json1_1GetNamedQueryCommand;
const serializeAws_json1_1GetPreparedStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetPreparedStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetPreparedStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetPreparedStatementCommand = serializeAws_json1_1GetPreparedStatementCommand;
const serializeAws_json1_1GetQueryExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetQueryExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetQueryExecutionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetQueryExecutionCommand = serializeAws_json1_1GetQueryExecutionCommand;
const serializeAws_json1_1GetQueryResultsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetQueryResults",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetQueryResultsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetQueryResultsCommand = serializeAws_json1_1GetQueryResultsCommand;
const serializeAws_json1_1GetQueryRuntimeStatisticsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetQueryRuntimeStatistics",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetQueryRuntimeStatisticsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetQueryRuntimeStatisticsCommand = serializeAws_json1_1GetQueryRuntimeStatisticsCommand;
const serializeAws_json1_1GetTableMetadataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetTableMetadata",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetTableMetadataInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetTableMetadataCommand = serializeAws_json1_1GetTableMetadataCommand;
const serializeAws_json1_1GetWorkGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.GetWorkGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetWorkGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetWorkGroupCommand = serializeAws_json1_1GetWorkGroupCommand;
const serializeAws_json1_1ListDatabasesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListDatabases",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDatabasesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDatabasesCommand = serializeAws_json1_1ListDatabasesCommand;
const serializeAws_json1_1ListDataCatalogsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListDataCatalogs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDataCatalogsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDataCatalogsCommand = serializeAws_json1_1ListDataCatalogsCommand;
const serializeAws_json1_1ListEngineVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListEngineVersions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEngineVersionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEngineVersionsCommand = serializeAws_json1_1ListEngineVersionsCommand;
const serializeAws_json1_1ListNamedQueriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListNamedQueries",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListNamedQueriesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListNamedQueriesCommand = serializeAws_json1_1ListNamedQueriesCommand;
const serializeAws_json1_1ListPreparedStatementsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListPreparedStatements",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPreparedStatementsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPreparedStatementsCommand = serializeAws_json1_1ListPreparedStatementsCommand;
const serializeAws_json1_1ListQueryExecutionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListQueryExecutions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListQueryExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListQueryExecutionsCommand = serializeAws_json1_1ListQueryExecutionsCommand;
const serializeAws_json1_1ListTableMetadataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListTableMetadata",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTableMetadataInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTableMetadataCommand = serializeAws_json1_1ListTableMetadataCommand;
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
const serializeAws_json1_1ListWorkGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.ListWorkGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListWorkGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListWorkGroupsCommand = serializeAws_json1_1ListWorkGroupsCommand;
const serializeAws_json1_1StartQueryExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.StartQueryExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartQueryExecutionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartQueryExecutionCommand = serializeAws_json1_1StartQueryExecutionCommand;
const serializeAws_json1_1StopQueryExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.StopQueryExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopQueryExecutionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopQueryExecutionCommand = serializeAws_json1_1StopQueryExecutionCommand;
const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
const serializeAws_json1_1UpdateDataCatalogCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.UpdateDataCatalog",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDataCatalogInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateDataCatalogCommand = serializeAws_json1_1UpdateDataCatalogCommand;
const serializeAws_json1_1UpdateNamedQueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.UpdateNamedQuery",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNamedQueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateNamedQueryCommand = serializeAws_json1_1UpdateNamedQueryCommand;
const serializeAws_json1_1UpdatePreparedStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.UpdatePreparedStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdatePreparedStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdatePreparedStatementCommand = serializeAws_json1_1UpdatePreparedStatementCommand;
const serializeAws_json1_1UpdateWorkGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonAthena.UpdateWorkGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateWorkGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateWorkGroupCommand = serializeAws_json1_1UpdateWorkGroupCommand;
const deserializeAws_json1_1BatchGetNamedQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetNamedQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetNamedQueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchGetNamedQueryCommand = deserializeAws_json1_1BatchGetNamedQueryCommand;
const deserializeAws_json1_1BatchGetNamedQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1BatchGetPreparedStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetPreparedStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetPreparedStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchGetPreparedStatementCommand = deserializeAws_json1_1BatchGetPreparedStatementCommand;
const deserializeAws_json1_1BatchGetPreparedStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1BatchGetQueryExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetQueryExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetQueryExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchGetQueryExecutionCommand = deserializeAws_json1_1BatchGetQueryExecutionCommand;
const deserializeAws_json1_1BatchGetQueryExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateDataCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDataCatalogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDataCatalogOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateDataCatalogCommand = deserializeAws_json1_1CreateDataCatalogCommand;
const deserializeAws_json1_1CreateDataCatalogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateNamedQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNamedQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNamedQueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateNamedQueryCommand = deserializeAws_json1_1CreateNamedQueryCommand;
const deserializeAws_json1_1CreateNamedQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreatePreparedStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePreparedStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreatePreparedStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreatePreparedStatementCommand = deserializeAws_json1_1CreatePreparedStatementCommand;
const deserializeAws_json1_1CreatePreparedStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateWorkGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateWorkGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateWorkGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateWorkGroupCommand = deserializeAws_json1_1CreateWorkGroupCommand;
const deserializeAws_json1_1CreateWorkGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteDataCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDataCatalogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteDataCatalogOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteDataCatalogCommand = deserializeAws_json1_1DeleteDataCatalogCommand;
const deserializeAws_json1_1DeleteDataCatalogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteNamedQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNamedQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteNamedQueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteNamedQueryCommand = deserializeAws_json1_1DeleteNamedQueryCommand;
const deserializeAws_json1_1DeleteNamedQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeletePreparedStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePreparedStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeletePreparedStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeletePreparedStatementCommand = deserializeAws_json1_1DeletePreparedStatementCommand;
const deserializeAws_json1_1DeletePreparedStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteWorkGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteWorkGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteWorkGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteWorkGroupCommand = deserializeAws_json1_1DeleteWorkGroupCommand;
const deserializeAws_json1_1DeleteWorkGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDatabaseOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetDatabaseCommand = deserializeAws_json1_1GetDatabaseCommand;
const deserializeAws_json1_1GetDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MetadataException":
        case "com.amazonaws.athena#MetadataException":
            throw await deserializeAws_json1_1MetadataExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetDataCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDataCatalogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDataCatalogOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetDataCatalogCommand = deserializeAws_json1_1GetDataCatalogCommand;
const deserializeAws_json1_1GetDataCatalogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetNamedQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetNamedQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetNamedQueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetNamedQueryCommand = deserializeAws_json1_1GetNamedQueryCommand;
const deserializeAws_json1_1GetNamedQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetPreparedStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPreparedStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetPreparedStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetPreparedStatementCommand = deserializeAws_json1_1GetPreparedStatementCommand;
const deserializeAws_json1_1GetPreparedStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetQueryExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetQueryExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetQueryExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetQueryExecutionCommand = deserializeAws_json1_1GetQueryExecutionCommand;
const deserializeAws_json1_1GetQueryExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetQueryResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetQueryResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetQueryResultsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetQueryResultsCommand = deserializeAws_json1_1GetQueryResultsCommand;
const deserializeAws_json1_1GetQueryResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetQueryRuntimeStatisticsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetQueryRuntimeStatisticsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetQueryRuntimeStatisticsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetQueryRuntimeStatisticsCommand = deserializeAws_json1_1GetQueryRuntimeStatisticsCommand;
const deserializeAws_json1_1GetQueryRuntimeStatisticsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetTableMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetTableMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetTableMetadataOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetTableMetadataCommand = deserializeAws_json1_1GetTableMetadataCommand;
const deserializeAws_json1_1GetTableMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MetadataException":
        case "com.amazonaws.athena#MetadataException":
            throw await deserializeAws_json1_1MetadataExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetWorkGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetWorkGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetWorkGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetWorkGroupCommand = deserializeAws_json1_1GetWorkGroupCommand;
const deserializeAws_json1_1GetWorkGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDatabasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDatabasesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDatabasesCommand = deserializeAws_json1_1ListDatabasesCommand;
const deserializeAws_json1_1ListDatabasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MetadataException":
        case "com.amazonaws.athena#MetadataException":
            throw await deserializeAws_json1_1MetadataExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListDataCatalogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDataCatalogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDataCatalogsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDataCatalogsCommand = deserializeAws_json1_1ListDataCatalogsCommand;
const deserializeAws_json1_1ListDataCatalogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListEngineVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEngineVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEngineVersionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEngineVersionsCommand = deserializeAws_json1_1ListEngineVersionsCommand;
const deserializeAws_json1_1ListEngineVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListNamedQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListNamedQueriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListNamedQueriesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListNamedQueriesCommand = deserializeAws_json1_1ListNamedQueriesCommand;
const deserializeAws_json1_1ListNamedQueriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListPreparedStatementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPreparedStatementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPreparedStatementsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPreparedStatementsCommand = deserializeAws_json1_1ListPreparedStatementsCommand;
const deserializeAws_json1_1ListPreparedStatementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListQueryExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListQueryExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListQueryExecutionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListQueryExecutionsCommand = deserializeAws_json1_1ListQueryExecutionsCommand;
const deserializeAws_json1_1ListQueryExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListTableMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTableMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTableMetadataOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTableMetadataCommand = deserializeAws_json1_1ListTableMetadataCommand;
const deserializeAws_json1_1ListTableMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MetadataException":
        case "com.amazonaws.athena#MetadataException":
            throw await deserializeAws_json1_1MetadataExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListWorkGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListWorkGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListWorkGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListWorkGroupsCommand = deserializeAws_json1_1ListWorkGroupsCommand;
const deserializeAws_json1_1ListWorkGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1StartQueryExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartQueryExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartQueryExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartQueryExecutionCommand = deserializeAws_json1_1StartQueryExecutionCommand;
const deserializeAws_json1_1StartQueryExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.athena#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1StopQueryExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopQueryExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopQueryExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopQueryExecutionCommand = deserializeAws_json1_1StopQueryExecutionCommand;
const deserializeAws_json1_1StopQueryExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateDataCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDataCatalogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDataCatalogOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateDataCatalogCommand = deserializeAws_json1_1UpdateDataCatalogCommand;
const deserializeAws_json1_1UpdateDataCatalogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateNamedQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNamedQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNamedQueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateNamedQueryCommand = deserializeAws_json1_1UpdateNamedQueryCommand;
const deserializeAws_json1_1UpdateNamedQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdatePreparedStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePreparedStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdatePreparedStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdatePreparedStatementCommand = deserializeAws_json1_1UpdatePreparedStatementCommand;
const deserializeAws_json1_1UpdatePreparedStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.athena#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateWorkGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateWorkGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateWorkGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateWorkGroupCommand = deserializeAws_json1_1UpdateWorkGroupCommand;
const deserializeAws_json1_1UpdateWorkGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.athena#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.athena#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: AthenaServiceException_1.AthenaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerException(body, context);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1MetadataExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1MetadataException(body, context);
    const exception = new models_0_1.MetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1AclConfiguration = (input, context) => {
    return {
        ...(input.S3AclOption != null && { S3AclOption: input.S3AclOption }),
    };
};
const serializeAws_json1_1BatchGetNamedQueryInput = (input, context) => {
    return {
        ...(input.NamedQueryIds != null && {
            NamedQueryIds: serializeAws_json1_1NamedQueryIdList(input.NamedQueryIds, context),
        }),
    };
};
const serializeAws_json1_1BatchGetPreparedStatementInput = (input, context) => {
    return {
        ...(input.PreparedStatementNames != null && {
            PreparedStatementNames: serializeAws_json1_1PreparedStatementNameList(input.PreparedStatementNames, context),
        }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1BatchGetQueryExecutionInput = (input, context) => {
    return {
        ...(input.QueryExecutionIds != null && {
            QueryExecutionIds: serializeAws_json1_1QueryExecutionIdList(input.QueryExecutionIds, context),
        }),
    };
};
const serializeAws_json1_1CreateDataCatalogInput = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Parameters != null && { Parameters: serializeAws_json1_1ParametersMap(input.Parameters, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1CreateNamedQueryInput = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.QueryString != null && { QueryString: input.QueryString }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1CreatePreparedStatementInput = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.QueryStatement != null && { QueryStatement: input.QueryStatement }),
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1CreateWorkGroupInput = (input, context) => {
    return {
        ...(input.Configuration != null && {
            Configuration: serializeAws_json1_1WorkGroupConfiguration(input.Configuration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1DeleteDataCatalogInput = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1DeleteNamedQueryInput = (input, context) => {
    var _a;
    return {
        NamedQueryId: (_a = input.NamedQueryId) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
    };
};
const serializeAws_json1_1DeletePreparedStatementInput = (input, context) => {
    return {
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1DeleteWorkGroupInput = (input, context) => {
    return {
        ...(input.RecursiveDeleteOption != null && { RecursiveDeleteOption: input.RecursiveDeleteOption }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1EncryptionConfiguration = (input, context) => {
    return {
        ...(input.EncryptionOption != null && { EncryptionOption: input.EncryptionOption }),
        ...(input.KmsKey != null && { KmsKey: input.KmsKey }),
    };
};
const serializeAws_json1_1EngineVersion = (input, context) => {
    return {
        ...(input.EffectiveEngineVersion != null && { EffectiveEngineVersion: input.EffectiveEngineVersion }),
        ...(input.SelectedEngineVersion != null && { SelectedEngineVersion: input.SelectedEngineVersion }),
    };
};
const serializeAws_json1_1ExecutionParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1GetDatabaseInput = (input, context) => {
    return {
        ...(input.CatalogName != null && { CatalogName: input.CatalogName }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
    };
};
const serializeAws_json1_1GetDataCatalogInput = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1GetNamedQueryInput = (input, context) => {
    return {
        ...(input.NamedQueryId != null && { NamedQueryId: input.NamedQueryId }),
    };
};
const serializeAws_json1_1GetPreparedStatementInput = (input, context) => {
    return {
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1GetQueryExecutionInput = (input, context) => {
    return {
        ...(input.QueryExecutionId != null && { QueryExecutionId: input.QueryExecutionId }),
    };
};
const serializeAws_json1_1GetQueryResultsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.QueryExecutionId != null && { QueryExecutionId: input.QueryExecutionId }),
    };
};
const serializeAws_json1_1GetQueryRuntimeStatisticsInput = (input, context) => {
    return {
        ...(input.QueryExecutionId != null && { QueryExecutionId: input.QueryExecutionId }),
    };
};
const serializeAws_json1_1GetTableMetadataInput = (input, context) => {
    return {
        ...(input.CatalogName != null && { CatalogName: input.CatalogName }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
        ...(input.TableName != null && { TableName: input.TableName }),
    };
};
const serializeAws_json1_1GetWorkGroupInput = (input, context) => {
    return {
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1ListDatabasesInput = (input, context) => {
    return {
        ...(input.CatalogName != null && { CatalogName: input.CatalogName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDataCatalogsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListEngineVersionsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListNamedQueriesInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1ListPreparedStatementsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1ListQueryExecutionsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1ListTableMetadataInput = (input, context) => {
    return {
        ...(input.CatalogName != null && { CatalogName: input.CatalogName }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
    };
};
const serializeAws_json1_1ListWorkGroupsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1NamedQueryIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ParametersMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1PreparedStatementNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1QueryExecutionContext = (input, context) => {
    return {
        ...(input.Catalog != null && { Catalog: input.Catalog }),
        ...(input.Database != null && { Database: input.Database }),
    };
};
const serializeAws_json1_1QueryExecutionIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ResultConfiguration = (input, context) => {
    return {
        ...(input.AclConfiguration != null && {
            AclConfiguration: serializeAws_json1_1AclConfiguration(input.AclConfiguration, context),
        }),
        ...(input.EncryptionConfiguration != null && {
            EncryptionConfiguration: serializeAws_json1_1EncryptionConfiguration(input.EncryptionConfiguration, context),
        }),
        ...(input.ExpectedBucketOwner != null && { ExpectedBucketOwner: input.ExpectedBucketOwner }),
        ...(input.OutputLocation != null && { OutputLocation: input.OutputLocation }),
    };
};
const serializeAws_json1_1ResultConfigurationUpdates = (input, context) => {
    return {
        ...(input.AclConfiguration != null && {
            AclConfiguration: serializeAws_json1_1AclConfiguration(input.AclConfiguration, context),
        }),
        ...(input.EncryptionConfiguration != null && {
            EncryptionConfiguration: serializeAws_json1_1EncryptionConfiguration(input.EncryptionConfiguration, context),
        }),
        ...(input.ExpectedBucketOwner != null && { ExpectedBucketOwner: input.ExpectedBucketOwner }),
        ...(input.OutputLocation != null && { OutputLocation: input.OutputLocation }),
        ...(input.RemoveAclConfiguration != null && { RemoveAclConfiguration: input.RemoveAclConfiguration }),
        ...(input.RemoveEncryptionConfiguration != null && {
            RemoveEncryptionConfiguration: input.RemoveEncryptionConfiguration,
        }),
        ...(input.RemoveExpectedBucketOwner != null && { RemoveExpectedBucketOwner: input.RemoveExpectedBucketOwner }),
        ...(input.RemoveOutputLocation != null && { RemoveOutputLocation: input.RemoveOutputLocation }),
    };
};
const serializeAws_json1_1StartQueryExecutionInput = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.ExecutionParameters != null && {
            ExecutionParameters: serializeAws_json1_1ExecutionParameters(input.ExecutionParameters, context),
        }),
        ...(input.QueryExecutionContext != null && {
            QueryExecutionContext: serializeAws_json1_1QueryExecutionContext(input.QueryExecutionContext, context),
        }),
        ...(input.QueryString != null && { QueryString: input.QueryString }),
        ...(input.ResultConfiguration != null && {
            ResultConfiguration: serializeAws_json1_1ResultConfiguration(input.ResultConfiguration, context),
        }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1StopQueryExecutionInput = (input, context) => {
    var _a;
    return {
        QueryExecutionId: (_a = input.QueryExecutionId) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
    };
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceInput = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1UntagResourceInput = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateDataCatalogInput = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Parameters != null && { Parameters: serializeAws_json1_1ParametersMap(input.Parameters, context) }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1UpdateNamedQueryInput = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.NamedQueryId != null && { NamedQueryId: input.NamedQueryId }),
        ...(input.QueryString != null && { QueryString: input.QueryString }),
    };
};
const serializeAws_json1_1UpdatePreparedStatementInput = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.QueryStatement != null && { QueryStatement: input.QueryStatement }),
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1UpdateWorkGroupInput = (input, context) => {
    return {
        ...(input.ConfigurationUpdates != null && {
            ConfigurationUpdates: serializeAws_json1_1WorkGroupConfigurationUpdates(input.ConfigurationUpdates, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.State != null && { State: input.State }),
        ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1WorkGroupConfiguration = (input, context) => {
    return {
        ...(input.BytesScannedCutoffPerQuery != null && { BytesScannedCutoffPerQuery: input.BytesScannedCutoffPerQuery }),
        ...(input.EnforceWorkGroupConfiguration != null && {
            EnforceWorkGroupConfiguration: input.EnforceWorkGroupConfiguration,
        }),
        ...(input.EngineVersion != null && {
            EngineVersion: serializeAws_json1_1EngineVersion(input.EngineVersion, context),
        }),
        ...(input.PublishCloudWatchMetricsEnabled != null && {
            PublishCloudWatchMetricsEnabled: input.PublishCloudWatchMetricsEnabled,
        }),
        ...(input.RequesterPaysEnabled != null && { RequesterPaysEnabled: input.RequesterPaysEnabled }),
        ...(input.ResultConfiguration != null && {
            ResultConfiguration: serializeAws_json1_1ResultConfiguration(input.ResultConfiguration, context),
        }),
    };
};
const serializeAws_json1_1WorkGroupConfigurationUpdates = (input, context) => {
    return {
        ...(input.BytesScannedCutoffPerQuery != null && { BytesScannedCutoffPerQuery: input.BytesScannedCutoffPerQuery }),
        ...(input.EnforceWorkGroupConfiguration != null && {
            EnforceWorkGroupConfiguration: input.EnforceWorkGroupConfiguration,
        }),
        ...(input.EngineVersion != null && {
            EngineVersion: serializeAws_json1_1EngineVersion(input.EngineVersion, context),
        }),
        ...(input.PublishCloudWatchMetricsEnabled != null && {
            PublishCloudWatchMetricsEnabled: input.PublishCloudWatchMetricsEnabled,
        }),
        ...(input.RemoveBytesScannedCutoffPerQuery != null && {
            RemoveBytesScannedCutoffPerQuery: input.RemoveBytesScannedCutoffPerQuery,
        }),
        ...(input.RequesterPaysEnabled != null && { RequesterPaysEnabled: input.RequesterPaysEnabled }),
        ...(input.ResultConfigurationUpdates != null && {
            ResultConfigurationUpdates: serializeAws_json1_1ResultConfigurationUpdates(input.ResultConfigurationUpdates, context),
        }),
    };
};
const deserializeAws_json1_1AclConfiguration = (output, context) => {
    return {
        S3AclOption: (0, smithy_client_1.expectString)(output.S3AclOption),
    };
};
const deserializeAws_json1_1AthenaError = (output, context) => {
    return {
        ErrorCategory: (0, smithy_client_1.expectInt32)(output.ErrorCategory),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        ErrorType: (0, smithy_client_1.expectInt32)(output.ErrorType),
        Retryable: (0, smithy_client_1.expectBoolean)(output.Retryable),
    };
};
const deserializeAws_json1_1BatchGetNamedQueryOutput = (output, context) => {
    return {
        NamedQueries: output.NamedQueries != null ? deserializeAws_json1_1NamedQueryList(output.NamedQueries, context) : undefined,
        UnprocessedNamedQueryIds: output.UnprocessedNamedQueryIds != null
            ? deserializeAws_json1_1UnprocessedNamedQueryIdList(output.UnprocessedNamedQueryIds, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetPreparedStatementOutput = (output, context) => {
    return {
        PreparedStatements: output.PreparedStatements != null
            ? deserializeAws_json1_1PreparedStatementDetailsList(output.PreparedStatements, context)
            : undefined,
        UnprocessedPreparedStatementNames: output.UnprocessedPreparedStatementNames != null
            ? deserializeAws_json1_1UnprocessedPreparedStatementNameList(output.UnprocessedPreparedStatementNames, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetQueryExecutionOutput = (output, context) => {
    return {
        QueryExecutions: output.QueryExecutions != null
            ? deserializeAws_json1_1QueryExecutionList(output.QueryExecutions, context)
            : undefined,
        UnprocessedQueryExecutionIds: output.UnprocessedQueryExecutionIds != null
            ? deserializeAws_json1_1UnprocessedQueryExecutionIdList(output.UnprocessedQueryExecutionIds, context)
            : undefined,
    };
};
const deserializeAws_json1_1Column = (output, context) => {
    return {
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1ColumnInfo = (output, context) => {
    return {
        CaseSensitive: (0, smithy_client_1.expectBoolean)(output.CaseSensitive),
        CatalogName: (0, smithy_client_1.expectString)(output.CatalogName),
        Label: (0, smithy_client_1.expectString)(output.Label),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Nullable: (0, smithy_client_1.expectString)(output.Nullable),
        Precision: (0, smithy_client_1.expectInt32)(output.Precision),
        Scale: (0, smithy_client_1.expectInt32)(output.Scale),
        SchemaName: (0, smithy_client_1.expectString)(output.SchemaName),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1ColumnInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ColumnInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ColumnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Column(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CreateDataCatalogOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1CreateNamedQueryOutput = (output, context) => {
    return {
        NamedQueryId: (0, smithy_client_1.expectString)(output.NamedQueryId),
    };
};
const deserializeAws_json1_1CreatePreparedStatementOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1CreateWorkGroupOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1Database = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParametersMap(output.Parameters, context) : undefined,
    };
};
const deserializeAws_json1_1DatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Database(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DataCatalog = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParametersMap(output.Parameters, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1DataCatalogSummary = (output, context) => {
    return {
        CatalogName: (0, smithy_client_1.expectString)(output.CatalogName),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1DataCatalogSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DataCatalogSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Datum = (output, context) => {
    return {
        VarCharValue: (0, smithy_client_1.expectString)(output.VarCharValue),
    };
};
const deserializeAws_json1_1datumList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Datum(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeleteDataCatalogOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteNamedQueryOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeletePreparedStatementOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteWorkGroupOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1EncryptionConfiguration = (output, context) => {
    return {
        EncryptionOption: (0, smithy_client_1.expectString)(output.EncryptionOption),
        KmsKey: (0, smithy_client_1.expectString)(output.KmsKey),
    };
};
const deserializeAws_json1_1EngineVersion = (output, context) => {
    return {
        EffectiveEngineVersion: (0, smithy_client_1.expectString)(output.EffectiveEngineVersion),
        SelectedEngineVersion: (0, smithy_client_1.expectString)(output.SelectedEngineVersion),
    };
};
const deserializeAws_json1_1EngineVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EngineVersion(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ExecutionParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1GetDatabaseOutput = (output, context) => {
    return {
        Database: output.Database != null ? deserializeAws_json1_1Database(output.Database, context) : undefined,
    };
};
const deserializeAws_json1_1GetDataCatalogOutput = (output, context) => {
    return {
        DataCatalog: output.DataCatalog != null ? deserializeAws_json1_1DataCatalog(output.DataCatalog, context) : undefined,
    };
};
const deserializeAws_json1_1GetNamedQueryOutput = (output, context) => {
    return {
        NamedQuery: output.NamedQuery != null ? deserializeAws_json1_1NamedQuery(output.NamedQuery, context) : undefined,
    };
};
const deserializeAws_json1_1GetPreparedStatementOutput = (output, context) => {
    return {
        PreparedStatement: output.PreparedStatement != null
            ? deserializeAws_json1_1PreparedStatement(output.PreparedStatement, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetQueryExecutionOutput = (output, context) => {
    return {
        QueryExecution: output.QueryExecution != null ? deserializeAws_json1_1QueryExecution(output.QueryExecution, context) : undefined,
    };
};
const deserializeAws_json1_1GetQueryResultsOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResultSet: output.ResultSet != null ? deserializeAws_json1_1ResultSet(output.ResultSet, context) : undefined,
        UpdateCount: (0, smithy_client_1.expectLong)(output.UpdateCount),
    };
};
const deserializeAws_json1_1GetQueryRuntimeStatisticsOutput = (output, context) => {
    return {
        QueryRuntimeStatistics: output.QueryRuntimeStatistics != null
            ? deserializeAws_json1_1QueryRuntimeStatistics(output.QueryRuntimeStatistics, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetTableMetadataOutput = (output, context) => {
    return {
        TableMetadata: output.TableMetadata != null ? deserializeAws_json1_1TableMetadata(output.TableMetadata, context) : undefined,
    };
};
const deserializeAws_json1_1GetWorkGroupOutput = (output, context) => {
    return {
        WorkGroup: output.WorkGroup != null ? deserializeAws_json1_1WorkGroup(output.WorkGroup, context) : undefined,
    };
};
const deserializeAws_json1_1InternalServerException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1InvalidRequestException = (output, context) => {
    return {
        AthenaErrorCode: (0, smithy_client_1.expectString)(output.AthenaErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1ListDatabasesOutput = (output, context) => {
    return {
        DatabaseList: output.DatabaseList != null ? deserializeAws_json1_1DatabaseList(output.DatabaseList, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListDataCatalogsOutput = (output, context) => {
    return {
        DataCatalogsSummary: output.DataCatalogsSummary != null
            ? deserializeAws_json1_1DataCatalogSummaryList(output.DataCatalogsSummary, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListEngineVersionsOutput = (output, context) => {
    return {
        EngineVersions: output.EngineVersions != null
            ? deserializeAws_json1_1EngineVersionsList(output.EngineVersions, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListNamedQueriesOutput = (output, context) => {
    return {
        NamedQueryIds: output.NamedQueryIds != null ? deserializeAws_json1_1NamedQueryIdList(output.NamedQueryIds, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListPreparedStatementsOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        PreparedStatements: output.PreparedStatements != null
            ? deserializeAws_json1_1PreparedStatementsList(output.PreparedStatements, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListQueryExecutionsOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        QueryExecutionIds: output.QueryExecutionIds != null
            ? deserializeAws_json1_1QueryExecutionIdList(output.QueryExecutionIds, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTableMetadataOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        TableMetadataList: output.TableMetadataList != null
            ? deserializeAws_json1_1TableMetadataList(output.TableMetadataList, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTagsForResourceOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1ListWorkGroupsOutput = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WorkGroups: output.WorkGroups != null ? deserializeAws_json1_1WorkGroupsList(output.WorkGroups, context) : undefined,
    };
};
const deserializeAws_json1_1MetadataException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1NamedQuery = (output, context) => {
    return {
        Database: (0, smithy_client_1.expectString)(output.Database),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        NamedQueryId: (0, smithy_client_1.expectString)(output.NamedQueryId),
        QueryString: (0, smithy_client_1.expectString)(output.QueryString),
        WorkGroup: (0, smithy_client_1.expectString)(output.WorkGroup),
    };
};
const deserializeAws_json1_1NamedQueryIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1NamedQueryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NamedQuery(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ParametersMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1PreparedStatement = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModifiedTime: output.LastModifiedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime)))
            : undefined,
        QueryStatement: (0, smithy_client_1.expectString)(output.QueryStatement),
        StatementName: (0, smithy_client_1.expectString)(output.StatementName),
        WorkGroupName: (0, smithy_client_1.expectString)(output.WorkGroupName),
    };
};
const deserializeAws_json1_1PreparedStatementDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PreparedStatement(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PreparedStatementsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PreparedStatementSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PreparedStatementSummary = (output, context) => {
    return {
        LastModifiedTime: output.LastModifiedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime)))
            : undefined,
        StatementName: (0, smithy_client_1.expectString)(output.StatementName),
    };
};
const deserializeAws_json1_1QueryExecution = (output, context) => {
    return {
        EngineVersion: output.EngineVersion != null ? deserializeAws_json1_1EngineVersion(output.EngineVersion, context) : undefined,
        ExecutionParameters: output.ExecutionParameters != null
            ? deserializeAws_json1_1ExecutionParameters(output.ExecutionParameters, context)
            : undefined,
        Query: (0, smithy_client_1.expectString)(output.Query),
        QueryExecutionContext: output.QueryExecutionContext != null
            ? deserializeAws_json1_1QueryExecutionContext(output.QueryExecutionContext, context)
            : undefined,
        QueryExecutionId: (0, smithy_client_1.expectString)(output.QueryExecutionId),
        ResultConfiguration: output.ResultConfiguration != null
            ? deserializeAws_json1_1ResultConfiguration(output.ResultConfiguration, context)
            : undefined,
        StatementType: (0, smithy_client_1.expectString)(output.StatementType),
        Statistics: output.Statistics != null
            ? deserializeAws_json1_1QueryExecutionStatistics(output.Statistics, context)
            : undefined,
        Status: output.Status != null ? deserializeAws_json1_1QueryExecutionStatus(output.Status, context) : undefined,
        WorkGroup: (0, smithy_client_1.expectString)(output.WorkGroup),
    };
};
const deserializeAws_json1_1QueryExecutionContext = (output, context) => {
    return {
        Catalog: (0, smithy_client_1.expectString)(output.Catalog),
        Database: (0, smithy_client_1.expectString)(output.Database),
    };
};
const deserializeAws_json1_1QueryExecutionIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1QueryExecutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1QueryExecution(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1QueryExecutionStatistics = (output, context) => {
    return {
        DataManifestLocation: (0, smithy_client_1.expectString)(output.DataManifestLocation),
        DataScannedInBytes: (0, smithy_client_1.expectLong)(output.DataScannedInBytes),
        EngineExecutionTimeInMillis: (0, smithy_client_1.expectLong)(output.EngineExecutionTimeInMillis),
        QueryPlanningTimeInMillis: (0, smithy_client_1.expectLong)(output.QueryPlanningTimeInMillis),
        QueryQueueTimeInMillis: (0, smithy_client_1.expectLong)(output.QueryQueueTimeInMillis),
        ServiceProcessingTimeInMillis: (0, smithy_client_1.expectLong)(output.ServiceProcessingTimeInMillis),
        TotalExecutionTimeInMillis: (0, smithy_client_1.expectLong)(output.TotalExecutionTimeInMillis),
    };
};
const deserializeAws_json1_1QueryExecutionStatus = (output, context) => {
    return {
        AthenaError: output.AthenaError != null ? deserializeAws_json1_1AthenaError(output.AthenaError, context) : undefined,
        CompletionDateTime: output.CompletionDateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CompletionDateTime)))
            : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        StateChangeReason: (0, smithy_client_1.expectString)(output.StateChangeReason),
        SubmissionDateTime: output.SubmissionDateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SubmissionDateTime)))
            : undefined,
    };
};
const deserializeAws_json1_1QueryRuntimeStatistics = (output, context) => {
    return {
        OutputStage: output.OutputStage != null ? deserializeAws_json1_1QueryStage(output.OutputStage, context) : undefined,
        Rows: output.Rows != null ? deserializeAws_json1_1QueryRuntimeStatisticsRows(output.Rows, context) : undefined,
        Timeline: output.Timeline != null
            ? deserializeAws_json1_1QueryRuntimeStatisticsTimeline(output.Timeline, context)
            : undefined,
    };
};
const deserializeAws_json1_1QueryRuntimeStatisticsRows = (output, context) => {
    return {
        InputBytes: (0, smithy_client_1.expectLong)(output.InputBytes),
        InputRows: (0, smithy_client_1.expectLong)(output.InputRows),
        OutputBytes: (0, smithy_client_1.expectLong)(output.OutputBytes),
        OutputRows: (0, smithy_client_1.expectLong)(output.OutputRows),
    };
};
const deserializeAws_json1_1QueryRuntimeStatisticsTimeline = (output, context) => {
    return {
        EngineExecutionTimeInMillis: (0, smithy_client_1.expectLong)(output.EngineExecutionTimeInMillis),
        QueryPlanningTimeInMillis: (0, smithy_client_1.expectLong)(output.QueryPlanningTimeInMillis),
        QueryQueueTimeInMillis: (0, smithy_client_1.expectLong)(output.QueryQueueTimeInMillis),
        ServiceProcessingTimeInMillis: (0, smithy_client_1.expectLong)(output.ServiceProcessingTimeInMillis),
        TotalExecutionTimeInMillis: (0, smithy_client_1.expectLong)(output.TotalExecutionTimeInMillis),
    };
};
const deserializeAws_json1_1QueryStage = (output, context) => {
    return {
        ExecutionTime: (0, smithy_client_1.expectLong)(output.ExecutionTime),
        InputBytes: (0, smithy_client_1.expectLong)(output.InputBytes),
        InputRows: (0, smithy_client_1.expectLong)(output.InputRows),
        OutputBytes: (0, smithy_client_1.expectLong)(output.OutputBytes),
        OutputRows: (0, smithy_client_1.expectLong)(output.OutputRows),
        QueryStagePlan: output.QueryStagePlan != null
            ? deserializeAws_json1_1QueryStagePlanNode(output.QueryStagePlan, context)
            : undefined,
        StageId: (0, smithy_client_1.expectLong)(output.StageId),
        State: (0, smithy_client_1.expectString)(output.State),
        SubStages: output.SubStages != null ? deserializeAws_json1_1QueryStages(output.SubStages, context) : undefined,
    };
};
const deserializeAws_json1_1QueryStagePlanNode = (output, context) => {
    return {
        Children: output.Children != null ? deserializeAws_json1_1QueryStagePlanNodes(output.Children, context) : undefined,
        Identifier: (0, smithy_client_1.expectString)(output.Identifier),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RemoteSources: output.RemoteSources != null ? deserializeAws_json1_1StringList(output.RemoteSources, context) : undefined,
    };
};
const deserializeAws_json1_1QueryStagePlanNodes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1QueryStagePlanNode(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1QueryStages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1QueryStage(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceName: (0, smithy_client_1.expectString)(output.ResourceName),
    };
};
const deserializeAws_json1_1ResultConfiguration = (output, context) => {
    return {
        AclConfiguration: output.AclConfiguration != null
            ? deserializeAws_json1_1AclConfiguration(output.AclConfiguration, context)
            : undefined,
        EncryptionConfiguration: output.EncryptionConfiguration != null
            ? deserializeAws_json1_1EncryptionConfiguration(output.EncryptionConfiguration, context)
            : undefined,
        ExpectedBucketOwner: (0, smithy_client_1.expectString)(output.ExpectedBucketOwner),
        OutputLocation: (0, smithy_client_1.expectString)(output.OutputLocation),
    };
};
const deserializeAws_json1_1ResultSet = (output, context) => {
    return {
        ResultSetMetadata: output.ResultSetMetadata != null
            ? deserializeAws_json1_1ResultSetMetadata(output.ResultSetMetadata, context)
            : undefined,
        Rows: output.Rows != null ? deserializeAws_json1_1RowList(output.Rows, context) : undefined,
    };
};
const deserializeAws_json1_1ResultSetMetadata = (output, context) => {
    return {
        ColumnInfo: output.ColumnInfo != null ? deserializeAws_json1_1ColumnInfoList(output.ColumnInfo, context) : undefined,
    };
};
const deserializeAws_json1_1Row = (output, context) => {
    return {
        Data: output.Data != null ? deserializeAws_json1_1datumList(output.Data, context) : undefined,
    };
};
const deserializeAws_json1_1RowList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Row(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StartQueryExecutionOutput = (output, context) => {
    return {
        QueryExecutionId: (0, smithy_client_1.expectString)(output.QueryExecutionId),
    };
};
const deserializeAws_json1_1StopQueryExecutionOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1TableMetadata = (output, context) => {
    return {
        Columns: output.Columns != null ? deserializeAws_json1_1ColumnList(output.Columns, context) : undefined,
        CreateTime: output.CreateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreateTime))) : undefined,
        LastAccessTime: output.LastAccessTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAccessTime)))
            : undefined,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParametersMap(output.Parameters, context) : undefined,
        PartitionKeys: output.PartitionKeys != null ? deserializeAws_json1_1ColumnList(output.PartitionKeys, context) : undefined,
        TableType: (0, smithy_client_1.expectString)(output.TableType),
    };
};
const deserializeAws_json1_1TableMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TableMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TagResourceOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1TooManyRequestsException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        Reason: (0, smithy_client_1.expectString)(output.Reason),
    };
};
const deserializeAws_json1_1UnprocessedNamedQueryId = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        NamedQueryId: (0, smithy_client_1.expectString)(output.NamedQueryId),
    };
};
const deserializeAws_json1_1UnprocessedNamedQueryIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnprocessedNamedQueryId(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UnprocessedPreparedStatementName = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        StatementName: (0, smithy_client_1.expectString)(output.StatementName),
    };
};
const deserializeAws_json1_1UnprocessedPreparedStatementNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnprocessedPreparedStatementName(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UnprocessedQueryExecutionId = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        QueryExecutionId: (0, smithy_client_1.expectString)(output.QueryExecutionId),
    };
};
const deserializeAws_json1_1UnprocessedQueryExecutionIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnprocessedQueryExecutionId(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UntagResourceOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateDataCatalogOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateNamedQueryOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdatePreparedStatementOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateWorkGroupOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1WorkGroup = (output, context) => {
    return {
        Configuration: output.Configuration != null
            ? deserializeAws_json1_1WorkGroupConfiguration(output.Configuration, context)
            : undefined,
        CreationTime: output.CreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationTime)))
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        State: (0, smithy_client_1.expectString)(output.State),
    };
};
const deserializeAws_json1_1WorkGroupConfiguration = (output, context) => {
    return {
        BytesScannedCutoffPerQuery: (0, smithy_client_1.expectLong)(output.BytesScannedCutoffPerQuery),
        EnforceWorkGroupConfiguration: (0, smithy_client_1.expectBoolean)(output.EnforceWorkGroupConfiguration),
        EngineVersion: output.EngineVersion != null ? deserializeAws_json1_1EngineVersion(output.EngineVersion, context) : undefined,
        PublishCloudWatchMetricsEnabled: (0, smithy_client_1.expectBoolean)(output.PublishCloudWatchMetricsEnabled),
        RequesterPaysEnabled: (0, smithy_client_1.expectBoolean)(output.RequesterPaysEnabled),
        ResultConfiguration: output.ResultConfiguration != null
            ? deserializeAws_json1_1ResultConfiguration(output.ResultConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1WorkGroupsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1WorkGroupSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1WorkGroupSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationTime)))
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        EngineVersion: output.EngineVersion != null ? deserializeAws_json1_1EngineVersion(output.EngineVersion, context) : undefined,
        Name: (0, smithy_client_1.expectString)(output.Name),
        State: (0, smithy_client_1.expectString)(output.State),
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
