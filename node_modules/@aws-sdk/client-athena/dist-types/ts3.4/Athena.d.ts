import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { AthenaClient } from "./AthenaClient";
import { BatchGetNamedQueryCommandInput, BatchGetNamedQueryCommandOutput } from "./commands/BatchGetNamedQueryCommand";
import { BatchGetPreparedStatementCommandInput, BatchGetPreparedStatementCommandOutput } from "./commands/BatchGetPreparedStatementCommand";
import { BatchGetQueryExecutionCommandInput, BatchGetQueryExecutionCommandOutput } from "./commands/BatchGetQueryExecutionCommand";
import { CreateDataCatalogCommandInput, CreateDataCatalogCommandOutput } from "./commands/CreateDataCatalogCommand";
import { CreateNamedQueryCommandInput, CreateNamedQueryCommandOutput } from "./commands/CreateNamedQueryCommand";
import { CreatePreparedStatementCommandInput, CreatePreparedStatementCommandOutput } from "./commands/CreatePreparedStatementCommand";
import { CreateWorkGroupCommandInput, CreateWorkGroupCommandOutput } from "./commands/CreateWorkGroupCommand";
import { DeleteDataCatalogCommandInput, DeleteDataCatalogCommandOutput } from "./commands/DeleteDataCatalogCommand";
import { DeleteNamedQueryCommandInput, DeleteNamedQueryCommandOutput } from "./commands/DeleteNamedQueryCommand";
import { DeletePreparedStatementCommandInput, DeletePreparedStatementCommandOutput } from "./commands/DeletePreparedStatementCommand";
import { DeleteWorkGroupCommandInput, DeleteWorkGroupCommandOutput } from "./commands/DeleteWorkGroupCommand";
import { GetDatabaseCommandInput, GetDatabaseCommandOutput } from "./commands/GetDatabaseCommand";
import { GetDataCatalogCommandInput, GetDataCatalogCommandOutput } from "./commands/GetDataCatalogCommand";
import { GetNamedQueryCommandInput, GetNamedQueryCommandOutput } from "./commands/GetNamedQueryCommand";
import { GetPreparedStatementCommandInput, GetPreparedStatementCommandOutput } from "./commands/GetPreparedStatementCommand";
import { GetQueryExecutionCommandInput, GetQueryExecutionCommandOutput } from "./commands/GetQueryExecutionCommand";
import { GetQueryResultsCommandInput, GetQueryResultsCommandOutput } from "./commands/GetQueryResultsCommand";
import { GetQueryRuntimeStatisticsCommandInput, GetQueryRuntimeStatisticsCommandOutput } from "./commands/GetQueryRuntimeStatisticsCommand";
import { GetTableMetadataCommandInput, GetTableMetadataCommandOutput } from "./commands/GetTableMetadataCommand";
import { GetWorkGroupCommandInput, GetWorkGroupCommandOutput } from "./commands/GetWorkGroupCommand";
import { ListDatabasesCommandInput, ListDatabasesCommandOutput } from "./commands/ListDatabasesCommand";
import { ListDataCatalogsCommandInput, ListDataCatalogsCommandOutput } from "./commands/ListDataCatalogsCommand";
import { ListEngineVersionsCommandInput, ListEngineVersionsCommandOutput } from "./commands/ListEngineVersionsCommand";
import { ListNamedQueriesCommandInput, ListNamedQueriesCommandOutput } from "./commands/ListNamedQueriesCommand";
import { ListPreparedStatementsCommandInput, ListPreparedStatementsCommandOutput } from "./commands/ListPreparedStatementsCommand";
import { ListQueryExecutionsCommandInput, ListQueryExecutionsCommandOutput } from "./commands/ListQueryExecutionsCommand";
import { ListTableMetadataCommandInput, ListTableMetadataCommandOutput } from "./commands/ListTableMetadataCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListWorkGroupsCommandInput, ListWorkGroupsCommandOutput } from "./commands/ListWorkGroupsCommand";
import { StartQueryExecutionCommandInput, StartQueryExecutionCommandOutput } from "./commands/StartQueryExecutionCommand";
import { StopQueryExecutionCommandInput, StopQueryExecutionCommandOutput } from "./commands/StopQueryExecutionCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateDataCatalogCommandInput, UpdateDataCatalogCommandOutput } from "./commands/UpdateDataCatalogCommand";
import { UpdateNamedQueryCommandInput, UpdateNamedQueryCommandOutput } from "./commands/UpdateNamedQueryCommand";
import { UpdatePreparedStatementCommandInput, UpdatePreparedStatementCommandOutput } from "./commands/UpdatePreparedStatementCommand";
import { UpdateWorkGroupCommandInput, UpdateWorkGroupCommandOutput } from "./commands/UpdateWorkGroupCommand";

export declare class Athena extends AthenaClient {
    
    batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetNamedQueryCommandOutput>;
    batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, cb: (err: any, data?: BatchGetNamedQueryCommandOutput) => void): void;
    batchGetNamedQuery(args: BatchGetNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetNamedQueryCommandOutput) => void): void;
    
    batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetPreparedStatementCommandOutput>;
    batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, cb: (err: any, data?: BatchGetPreparedStatementCommandOutput) => void): void;
    batchGetPreparedStatement(args: BatchGetPreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetPreparedStatementCommandOutput) => void): void;
    
    batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetQueryExecutionCommandOutput>;
    batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, cb: (err: any, data?: BatchGetQueryExecutionCommandOutput) => void): void;
    batchGetQueryExecution(args: BatchGetQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetQueryExecutionCommandOutput) => void): void;
    
    createDataCatalog(args: CreateDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataCatalogCommandOutput>;
    createDataCatalog(args: CreateDataCatalogCommandInput, cb: (err: any, data?: CreateDataCatalogCommandOutput) => void): void;
    createDataCatalog(args: CreateDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataCatalogCommandOutput) => void): void;
    
    createNamedQuery(args: CreateNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<CreateNamedQueryCommandOutput>;
    createNamedQuery(args: CreateNamedQueryCommandInput, cb: (err: any, data?: CreateNamedQueryCommandOutput) => void): void;
    createNamedQuery(args: CreateNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNamedQueryCommandOutput) => void): void;
    
    createPreparedStatement(args: CreatePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<CreatePreparedStatementCommandOutput>;
    createPreparedStatement(args: CreatePreparedStatementCommandInput, cb: (err: any, data?: CreatePreparedStatementCommandOutput) => void): void;
    createPreparedStatement(args: CreatePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePreparedStatementCommandOutput) => void): void;
    
    createWorkGroup(args: CreateWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkGroupCommandOutput>;
    createWorkGroup(args: CreateWorkGroupCommandInput, cb: (err: any, data?: CreateWorkGroupCommandOutput) => void): void;
    createWorkGroup(args: CreateWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkGroupCommandOutput) => void): void;
    
    deleteDataCatalog(args: DeleteDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataCatalogCommandOutput>;
    deleteDataCatalog(args: DeleteDataCatalogCommandInput, cb: (err: any, data?: DeleteDataCatalogCommandOutput) => void): void;
    deleteDataCatalog(args: DeleteDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataCatalogCommandOutput) => void): void;
    
    deleteNamedQuery(args: DeleteNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNamedQueryCommandOutput>;
    deleteNamedQuery(args: DeleteNamedQueryCommandInput, cb: (err: any, data?: DeleteNamedQueryCommandOutput) => void): void;
    deleteNamedQuery(args: DeleteNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNamedQueryCommandOutput) => void): void;
    
    deletePreparedStatement(args: DeletePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<DeletePreparedStatementCommandOutput>;
    deletePreparedStatement(args: DeletePreparedStatementCommandInput, cb: (err: any, data?: DeletePreparedStatementCommandOutput) => void): void;
    deletePreparedStatement(args: DeletePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePreparedStatementCommandOutput) => void): void;
    
    deleteWorkGroup(args: DeleteWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkGroupCommandOutput>;
    deleteWorkGroup(args: DeleteWorkGroupCommandInput, cb: (err: any, data?: DeleteWorkGroupCommandOutput) => void): void;
    deleteWorkGroup(args: DeleteWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkGroupCommandOutput) => void): void;
    
    getDatabase(args: GetDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<GetDatabaseCommandOutput>;
    getDatabase(args: GetDatabaseCommandInput, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
    getDatabase(args: GetDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
    
    getDataCatalog(args: GetDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<GetDataCatalogCommandOutput>;
    getDataCatalog(args: GetDataCatalogCommandInput, cb: (err: any, data?: GetDataCatalogCommandOutput) => void): void;
    getDataCatalog(args: GetDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataCatalogCommandOutput) => void): void;
    
    getNamedQuery(args: GetNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<GetNamedQueryCommandOutput>;
    getNamedQuery(args: GetNamedQueryCommandInput, cb: (err: any, data?: GetNamedQueryCommandOutput) => void): void;
    getNamedQuery(args: GetNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNamedQueryCommandOutput) => void): void;
    
    getPreparedStatement(args: GetPreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<GetPreparedStatementCommandOutput>;
    getPreparedStatement(args: GetPreparedStatementCommandInput, cb: (err: any, data?: GetPreparedStatementCommandOutput) => void): void;
    getPreparedStatement(args: GetPreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPreparedStatementCommandOutput) => void): void;
    
    getQueryExecution(args: GetQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryExecutionCommandOutput>;
    getQueryExecution(args: GetQueryExecutionCommandInput, cb: (err: any, data?: GetQueryExecutionCommandOutput) => void): void;
    getQueryExecution(args: GetQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryExecutionCommandOutput) => void): void;
    
    getQueryResults(args: GetQueryResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryResultsCommandOutput>;
    getQueryResults(args: GetQueryResultsCommandInput, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
    getQueryResults(args: GetQueryResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryResultsCommandOutput) => void): void;
    
    getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<GetQueryRuntimeStatisticsCommandOutput>;
    getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, cb: (err: any, data?: GetQueryRuntimeStatisticsCommandOutput) => void): void;
    getQueryRuntimeStatistics(args: GetQueryRuntimeStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQueryRuntimeStatisticsCommandOutput) => void): void;
    
    getTableMetadata(args: GetTableMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetTableMetadataCommandOutput>;
    getTableMetadata(args: GetTableMetadataCommandInput, cb: (err: any, data?: GetTableMetadataCommandOutput) => void): void;
    getTableMetadata(args: GetTableMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableMetadataCommandOutput) => void): void;
    
    getWorkGroup(args: GetWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkGroupCommandOutput>;
    getWorkGroup(args: GetWorkGroupCommandInput, cb: (err: any, data?: GetWorkGroupCommandOutput) => void): void;
    getWorkGroup(args: GetWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkGroupCommandOutput) => void): void;
    
    listDatabases(args: ListDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<ListDatabasesCommandOutput>;
    listDatabases(args: ListDatabasesCommandInput, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
    listDatabases(args: ListDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatabasesCommandOutput) => void): void;
    
    listDataCatalogs(args: ListDataCatalogsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataCatalogsCommandOutput>;
    listDataCatalogs(args: ListDataCatalogsCommandInput, cb: (err: any, data?: ListDataCatalogsCommandOutput) => void): void;
    listDataCatalogs(args: ListDataCatalogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataCatalogsCommandOutput) => void): void;
    
    listEngineVersions(args: ListEngineVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListEngineVersionsCommandOutput>;
    listEngineVersions(args: ListEngineVersionsCommandInput, cb: (err: any, data?: ListEngineVersionsCommandOutput) => void): void;
    listEngineVersions(args: ListEngineVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEngineVersionsCommandOutput) => void): void;
    
    listNamedQueries(args: ListNamedQueriesCommandInput, options?: __HttpHandlerOptions): Promise<ListNamedQueriesCommandOutput>;
    listNamedQueries(args: ListNamedQueriesCommandInput, cb: (err: any, data?: ListNamedQueriesCommandOutput) => void): void;
    listNamedQueries(args: ListNamedQueriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNamedQueriesCommandOutput) => void): void;
    
    listPreparedStatements(args: ListPreparedStatementsCommandInput, options?: __HttpHandlerOptions): Promise<ListPreparedStatementsCommandOutput>;
    listPreparedStatements(args: ListPreparedStatementsCommandInput, cb: (err: any, data?: ListPreparedStatementsCommandOutput) => void): void;
    listPreparedStatements(args: ListPreparedStatementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPreparedStatementsCommandOutput) => void): void;
    
    listQueryExecutions(args: ListQueryExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<ListQueryExecutionsCommandOutput>;
    listQueryExecutions(args: ListQueryExecutionsCommandInput, cb: (err: any, data?: ListQueryExecutionsCommandOutput) => void): void;
    listQueryExecutions(args: ListQueryExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQueryExecutionsCommandOutput) => void): void;
    
    listTableMetadata(args: ListTableMetadataCommandInput, options?: __HttpHandlerOptions): Promise<ListTableMetadataCommandOutput>;
    listTableMetadata(args: ListTableMetadataCommandInput, cb: (err: any, data?: ListTableMetadataCommandOutput) => void): void;
    listTableMetadata(args: ListTableMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTableMetadataCommandOutput) => void): void;
    
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    
    listWorkGroups(args: ListWorkGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkGroupsCommandOutput>;
    listWorkGroups(args: ListWorkGroupsCommandInput, cb: (err: any, data?: ListWorkGroupsCommandOutput) => void): void;
    listWorkGroups(args: ListWorkGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkGroupsCommandOutput) => void): void;
    
    startQueryExecution(args: StartQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartQueryExecutionCommandOutput>;
    startQueryExecution(args: StartQueryExecutionCommandInput, cb: (err: any, data?: StartQueryExecutionCommandOutput) => void): void;
    startQueryExecution(args: StartQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartQueryExecutionCommandOutput) => void): void;
    
    stopQueryExecution(args: StopQueryExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StopQueryExecutionCommandOutput>;
    stopQueryExecution(args: StopQueryExecutionCommandInput, cb: (err: any, data?: StopQueryExecutionCommandOutput) => void): void;
    stopQueryExecution(args: StopQueryExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopQueryExecutionCommandOutput) => void): void;
    
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    
    updateDataCatalog(args: UpdateDataCatalogCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataCatalogCommandOutput>;
    updateDataCatalog(args: UpdateDataCatalogCommandInput, cb: (err: any, data?: UpdateDataCatalogCommandOutput) => void): void;
    updateDataCatalog(args: UpdateDataCatalogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataCatalogCommandOutput) => void): void;
    
    updateNamedQuery(args: UpdateNamedQueryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNamedQueryCommandOutput>;
    updateNamedQuery(args: UpdateNamedQueryCommandInput, cb: (err: any, data?: UpdateNamedQueryCommandOutput) => void): void;
    updateNamedQuery(args: UpdateNamedQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNamedQueryCommandOutput) => void): void;
    
    updatePreparedStatement(args: UpdatePreparedStatementCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePreparedStatementCommandOutput>;
    updatePreparedStatement(args: UpdatePreparedStatementCommandInput, cb: (err: any, data?: UpdatePreparedStatementCommandOutput) => void): void;
    updatePreparedStatement(args: UpdatePreparedStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePreparedStatementCommandOutput) => void): void;
    
    updateWorkGroup(args: UpdateWorkGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkGroupCommandOutput>;
    updateWorkGroup(args: UpdateWorkGroupCommandInput, cb: (err: any, data?: UpdateWorkGroupCommandOutput) => void): void;
    updateWorkGroup(args: UpdateWorkGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkGroupCommandOutput) => void): void;
}
